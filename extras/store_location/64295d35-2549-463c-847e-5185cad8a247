{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 3: Conditionals [180 mins]}\n\\subsection{Introduction}\n In this module, we will explore how to control the flow of a program's execution in Python. Control flow is the order in which statements are executed based on specific conditions or decisions. In this part of the lesson, we will dive into one of the essential control flow structures \\textbf{Conditionals}, which allow us to make decisions and execute different code blocks based on certain conditions. We will cover the use of \\textbf{if}, \\textbf{if-else}, \\textbf{if-elif-else}, and nested \\textbf{if} statements to handle various scenarios in our code. Furthermore, we will emphasize the significance of indentation and operator priority when writing conditional code. By the end of this lesson, we will have a solid understanding of how to implement and control the flow of our Python programs with Conditionals. It is worth mentioning that Conditionals are one of the core components that AI and Machine Learning depend on in their development.\n\n\n\n\\subsection{Control Flow}\nControl flow in Python refers to the order in which statements (code lines) are executed based on certain conditions or decisions. Python uses various control flow structures to control the flow of program execution, allowing us to make decisions, repeat code, and choose different paths depending on specific conditions. The main control flow structures we will focus on are (1) Conditionals and (2) Loops. This section will be addressing conditional statements while highlighting the execution sequence of the code.\nIn Python, indentation plays a crucial role in defining the structure of our code and determining how the sequence of statements is executed. Indentation is the use of spaces or tabs at the beginning of a line to indicate the scope and grouping of statements within blocks of code. It is used to create a visual hierarchy and organize the flow of control within our program.\nAll we have to know so far is that if a sequence of lines has the same spacing at the beginning, it is most likely that these lines belong to the same group of code, and will most likely execute after each other. An example of indents can be in this illustrative code.\n\n\n\\begin{lstlisting}[language=Python]\nCode Statement 1 Group 1\nCode Statement 2 Group 1\nCode Statement 3 Group 1\n    Code Statement 4 Group 2\n    Code Statement 5 Group 2\nCode Statement 6 Group 3\nCode Statement 7 Group 3\n\\end{lstlisting}\n\n\nWe notice how some code lines have the same group, the typical execution of this code would be statements 1, 2, 3, 4, 5, 6, 7. However, we notice that statements 4 and 5 have different indent than the others, i.e. they are shifted to the right. This indicates that they belong to a different group. Mainly, Statements 4 and 5 abide to Statement 3 since it is the one that precedes them. \n\n\n\\subsection{if}\nThe `if' statement is a fundamental control flow structure in Python. It allows us to make a decision on whether we want to execute a piece of code or not based on a certain condition. If a condition statement is true, it means that the code will be executed. If the statement is false, Python tells the computer to skip the group of code that follows it.\n\n\\subsubsection{Basic Conditions}\n\n\\begin{lstlisting}[language=Python]\nif condition_boolean:\n    Code Statement 2 Group 2\n\\end{lstlisting}\n\nThe sample code above represents the if condition. We use the word \\textbf{if}, followed by a \\textbf{boolean (condition)}, followed by \\textbf{: (two points)} to indicate the beginning of an \\textit{if statement}. Notice that the following code (after if) is indented 1 step forward. If the boolean condition is true, then the second line will be executed. If not, it will skip the shifted lines that follow. A practical example for the \\textit{if} statement is the following:\n\n\\begin{lstlisting}[language=Python]\nx = 10\ny = 5\nprint(\"Start\")\nif x > y:\n    print(\"x is bigger than y\")\n    print(\"The condition was True!\")\nprint(\"End\")\n\\end{lstlisting}\nThe execution for the above code starts by defining the variables x and y first. Afterward, Python will print \"Start\". Then, Python will perform an \\textbf{if condition} before executing the code inside of it (i.e., the indented line). Since the condition is true, Python will print both lines: \"x is bigger than y\" and \"The condition was True!\", then it will exist the if block. Eventually, the last line will be executed, and \"End\" will be printed.\n\nA lot of operations can be done inside the \\textbf{if}. We show in the below example how we can update a certain value if a condition was met:\n\\begin{lstlisting}[language=Python]\ncolor = \"green\"\ny = 5\nprint(color)\nif y == 5:\n    color = \"red\"\nprint(color)\n\\end{lstlisting}\nThis code will change the value of the variable \\textit{color} from \"green\" to \"red\" if the condition took place, i.e., if \\textit{y} is equal to 5.\n\nWe follow this example with another where the result of the \\textbf{if} is False.\n\n\\begin{lstlisting}[language=Python]\nx = 10\ny = 5\nprint(\"Start\")\nif x == y:\n    print(\"x is bigger than y\")\n    print(\"The condition was True!\")\nprint(\"End\")\n\\end{lstlisting}\n\nThe code, in this case, will do the usual, where it will first define the variables, and then print \"Start\". When it comes to the \\textbf{if statement}, the result of the condition is False, meaning that the code group that follows will not be executed. However, \"End\" will still be printed regardless of the \\textbf{if statement} since it does not belong to the \\textbf{if}.\n\n\\subsubsection{Input Conditions}\nThe expected outcome of the previous part of the lesson is pretty straightforward. We already knew what would be the execution of the Python without even running the code. The majority of the time, conditions are based on external factors, such as user input, where the programmer can not tell whether the condition would be true or false.\nThis example can illustrate the above:\n\n\\begin{lstlisting}[language=Python]\nx = input(\"enter a number\")\nx = int(x)\nif x > 5:\n    print(\"the user input is definitely bigger than 5\")\n\\end{lstlisting}\n\nThe code above will print the sentence according to the user's input and not the programmer's.\n\n\\subsubsection{Multiple Conditions}\nA lot of times we might only want to do a certain action if 2 conditions or more take place. In this part, we elaborate on that with the following example:\n\n\\begin{lstlisting}[language=Python]\nstudent_1_grade = 90\nstudent_2_grade = 80\nstudent_3_grade = 86\npassing_grade = 60\n\n\n\nif student_1_grade > passing_grade and student_2_grade > passing_grade and student_3_grade > passing_grade:\n    print(\"all students passed their classes!\")\n\nif student_1_grade > student_2_grade or student_1_grade > student_3_grade:\n    print(\"student 1 does not have the lowest grade!\")\n\n\n\\end{lstlisting}\n\nThis particular code has 2 if statements. The first one is true \\textbf{if} the three conditions are true. If any of these conditions is false then Python will skip the inner print. Afterward, the second if statement will be executed, which is composed of 2 conditions with an \\textbf{or} operator. If any of these conditions is valid, the inner print will execute. Otherwise, the code will finish since there are no further statements outside the if.\nNote that the previous piece of code is equivalent to the following:\n\\begin{lstlisting}[language=Python]\nstudent_1_grade = 90\nstudent_2_grade = 80\nstudent_3_grade = 86\npassing_grade = 60\n\nall_students_passed = student_1_grade > passing_grade and student_2_grade > passing_grade and student_3_grade > passing_grade\n\nstudent_1_is_not_lowest = student_1_grade > student_2_grade or student_1_grade > student_3_grade\n\nif all_students_passed:\n    print(\"all students passed their classes!\")\n\nif student_1_is_not_lowest:\n    print(\"student 1 does not have the lowest grade!\")\n\\end{lstlisting}\nThis way, we store the conditions inside boolean variables, then we use these variables instead of the whole conditions. This way is also valid. \n\n\\subsubsection{Operator Priority in Conditions}\nJust like the previous lesson about Booleans, priorities are still followed within the conditional if. An if statement, as indicated before, can have multiple conditions. The execution of these conditions depends on the priority of the operators which follows the standard rules of operator precedence in Python. The code below can remind us how important the priority can be:\n\n\\begin{lstlisting}[language=Python]\n# Code without paying attention to operator priority\ncourse_name = \"Math\"\ncourse_weeks = 8\ncourse_lessons = 50\n\nif course_name == \"AAI\" and course_lessons == 40 or course_weeks == 8:\n    print(\"This is the right course\")\n\\end{lstlisting}\n\n\\begin{lstlisting}[language=Python]\n# Code with parentheses to indicate operator priority\ncourse_name = \"Math\"\ncourse_weeks = 8\ncourse_lessons = 50\n\nif course_name == \"AAI\" and (course_lessons == 40 or course_weeks == 8):\n    print(\"This is the right course\")\n\\end{lstlisting}\n\nThe added parenthesis for the if statement in the second code forces the execution of the \\textbf{or} operator before the \\textbf{and}.\n\n\n\\subsection{if-else}\nThe \\textbf{if-else} statement is a fundamental control flow structure in Python that allows us to make decisions in our code. It is used to execute one block of code if a specified condition is True, and a different block of code if the condition is False.\nWe show its usage with this example:\n\\begin{lstlisting}[language=Python]\nx = 5\nif x > 5:\n    print(\"x is definitely bigger than 5\")\nelse:\n    print(\"x is definitely smaller than 5\")\n\\end{lstlisting}\nThis code will print \"x is definitely bigger than 5\" if x is greater than 5. Otherwise, meaning that if the condition was false, then \"x is definitely smaller than 5\" will be printed. The way to write the if-else statement is:\n\n\\begin{lstlisting}[language=Python]\nif boolean_value:\n    do something\nelse:\n    do something else\n\\end{lstlisting}\nNote that the \\textbf{else} has the same indent as the \\textbf{if}, and both of them have a two-pointer right after.\n\n\n\\subsection{if-elif-else}\nThe \\textbf{if-elif-else} statement is a control flow structure in Python that allows us to check multiple conditions and execute different blocks of code based on those conditions. It is an extension of the basic if-else statement and provides a way to handle multiple cases or scenarios in our code. The elif stands for \"else if,\" and it allows us to check additional conditions after the initial if condition.\n\nThe syntax of the \\textbf{if-elif-else} statement is as follows:\n\\begin{lstlisting}[language=Python]\n\nif condition1:\n    # Code block to be executed if condition1 is True\nelif condition2:\n    # Code block to be executed if condition1 is False, but condition2 is True\nelif condition3:\n    # Code block to be executed if both condition1 and condition2 are False, but condition3 is True\n...\nelse:\n    # Code block to be executed if all previous conditions are False\n\\end{lstlisting}\nNote that there could exist many \\textbf{elif}s, depending on how much is needed to properly cover the conditions.\nThe way to write \\textbf{elif} is similar to \\textbf{if}. It has a condition next to it, followed by two points. The \\textbf{else} at the end indicates that if none of the previous conditions is true, then execute what follows.\nAn example is below:\n\n\\begin{lstlisting}[language=Python]\n# Example: Checking a student's grade and passing status\ngrade = 85\n\nif grade >= 90:\n    print(\"You received an A grade.\")\nelif grade >= 80:\n    print(\"You received a B grade.\")\nelif grade >= 70:\n    print(\"You received a C grade.\")\nelif grade >= 60:\n    print(\"You received a D grade.\")\nelse:\n    print(\"You failed.\")\n\\end{lstlisting}\n\n\n\n\n\n\\subsection{nested if}\nA nested \\textbf{if} statement is an \\textbf{if} statement that is placed inside another \\textbf{if} statement. Meaning that the second \\textbf{if} statement has more indent (spaces before it) than the first one. In Python, we can use nested if statements to create more complex decision-making logic by checking multiple conditions and executing different blocks of code based on those conditions.\n\n\\begin{lstlisting}[language=Python]\n\n# (Zone A) Code block to be executed regardless of the conditions\nif condition1:\n    # (Zone B) Code block to be executed if condition1 is True\n    if condition2:\n        # (Zone C) Code block to be executed if both condition1 and condition2 are True\n# (Zone D) Code block to be executed regardless of the conditions\n\\end{lstlisting}\nThe code above shows the skeleton of having a nested \\textbf{if}. We can see that there are 4 zones for writing code around a nested \\textbf{if}. Zones A and D will be executed regardless of the conditions. Zone B will only execute if condition1 is True. Zone C will only execute if both condition1 and condition2 are met.\nAn example of this:\n\\begin{lstlisting}[language=Python]\nprint(1)\nif True:\n    print(2)\n    print(3)\n    if True:\n        print(4)\n        print(5)\n        print(6)\nprint(7)\n\\end{lstlisting}\nthis code will print all of the numbers from 1 to 7 in sequence order. Note that we used \\textbf{if True:} which doesn't usually make a lot of sense but it is still usable since \\textbf{True} is a boolean.\n\nNote that we need to distinguish between the nested if and the two ifs. For example:\n\\begin{lstlisting}[language=Python]\n\n# (Zone A) Code block to be executed regardless of the conditions\nif condition1:\n    # (Zone B) Code block to be executed if condition1 is True\nif condition2:\n    # (Zone C) Code block to be executed if condition2 is True\n# (Zone D) Code block to be executed regardless of the conditions\n\\end{lstlisting}\nThe example above indicates that the two ifs are independent.\n\n\nNested \\textbf{if}s can be more than 2. An example of 4 nested \\textbf{if}s below:\n\\begin{lstlisting}[language=Python]\ncourse = \"Math\"\ngrade = 95\npassing_grade = 60\nuniversity = \"LAU\"\nstudent = \"Sam\"\n\nif student == \"Sam\":\n    if grade >= passing_grade:\n        if university == \"LAU\":\n            if course == \"Math\":\n                print(\"Sam has passed the Math course at LAU\")\n\\end{lstlisting}\n\n\n\\subsection{Summary}\nWe learned in this lesson about \\textbf{conditional if}. We started by introducing the role of indentation in Python and how it helps define code structure and execution sequence. The lesson then covers the \\textbf{if} statement, which allows us to execute a code block based on a condition's truth value. We demonstrated the usage of basic conditions, input conditions, and multiple conditions with the \\textbf{and} and \\textbf{or} logical operators.\n\nNext, we explored the \\textbf{if-else} statement, which extends the \\textbf{if} statement to execute different blocks of code based on the truth value of a condition. We showcased practical examples of using the \\textbf{if-else} statement to handle alternative scenarios in our programs.\n\nThen we introduced the \\textbf{if-elif-else} statement, a control flow structure that allows for multiple condition checks in a sequence. We demonstrated how to use \\textbf{elif} (else if) statements to handle different cases effectively, ensuring that the code executes the appropriate block of code based on the fulfilled condition.\n\nFurthermore, we explore nested \\textbf{if} statements, where an \\textbf{if} statement is placed inside another \\textbf{if} statement, enabling us to create more complex decision-making logic by checking multiple conditions.\n\nThroughout the lesson, we emphasize the importance of operator precedence and the proper use of indentation to ensure clear and accurate control flow in Python code. \n\n\n\n\\subsection{Self-evaluation Quiz: Execution Sequence, and Programming With If Else [30 mins] }\n\\subsubsection*{\nQ1- What would be the final value of x?\n\\begin{lstlisting}[language=Python]\nx = 0\ny = False\nif y:\n    x = 50\nprint(x)\n\\end{lstlisting}\n- 0\n- 50\n- 25\n- Program Error\nFeedback: \\textit{y} is False. Therefore, the if condition won't execute what's inside of it. Thus, x will remain 0.\n\n\nQ2- What would be the final value of x?\n\\begin{lstlisting}[language=Python]\nx = 0\ny = True\nif y\n    x = 50\nprint(x)\n\\end{lstlisting}\n- 0\n- 50\n- 25\n- Program Error\nFeedback: The if statement is missing the two points after the variable \\textit{y}. Thus, this will result in a program error.\n\n\nQ3- What would be the final value of x?\n\\begin{lstlisting}[language=Python]\nx = 10\ny = False\nif not y:\n    x += 50\nprint(x)\n\\end{lstlisting}\n- 0\n- 10\n- 50\n- 60\nFeedback: The \\textbf{not} operator was used here to switch the boolean from False to True. Then \\textit{x} had the value 50 added to it. Therefore, the result is 60. \n\n\n\n\n\nQ4- what will be the output of this program?\n\\begin{lstlisting}[language=Python]\nx = 100\nprint(1)\nif x%2 == 0:\n    print(2)\nif x < 100:\n    print(3)\nelif x*x == 10000:\n    print(4)\nelif x-x == 0:\n    print(5)\nprint(6)\n\\end{lstlisting}\n- 1 2 3 4 5 6\n- 1 2 4 5 6\n- 1 3 5 6\n- 1 2 4 6\n- 1 2 6\nFeedback: The first and last prints will be executed regardless because they are not within the if statements. print(2) should also be executed because the remainder of the division of 100 by 2 is 0, thus True. print(3) wont be executed because \\textit{x} is not greater than 100. print(4) will be executed because 100 multiplied by itself is 10000. print(5) won't be executed because the previous \\textbf{elif} was True, therefore the code won't reach this step and it will skip it.\n\n\n\n\nQ5- What would be the final value of x?\n\\begin{lstlisting}[language=Python]\nis_class123_available = True\nuniversity_name = \"Lebanese American University\"\nstudents_count_fall_22 = 8228\nuniversity_country = \"Lebanon\"\n\nif university_name[0:3] == university_country[0:3]:\n    print(1)\n\nif not is_class123_available:\n    print(2)\n    if students_count_fall_22 == 8228:\n        print(3)\n    else:\n        print(4)\nelif True:\n    print (5)\nelse:\n    print(6)\n\n\\end{lstlisting}\n- 1 5 6 \n- 1 5 \n- 1 2 3 4 5 6 \n- 5 \n- 1 2 3 \n\nFeedback: print(1) is going to be executed because both variables share the same three first letters. print(2) is not going to be printed because the \\textit{if} is False. print(3) and print(4) are not reachable too because of the same reason. print(5) is executed because its \\textit{elif} is True. print(6) is not executed because the program will step out of the \\textit{if} statement once a True has been executed. \n\n}\n\n\n\n\n\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\n% \\subsection{Model Answer(s): Execution Sequence, and Programming With If Else}\n% [Page content]\n\n\n\n\\subsection{Share and Compare: Execution Sequence, and Programming With If Else [60 mins]}\n\\subsubsection*{Your task}\nWe invite you to engage in active learning by participating in an interactive discussion. This is a wonderful opportunity to share your insights, questions, and challenges related to the topics covered in this lesson: execution sequence, if statements, if-else statements, if-elif-else statements, and nested if statements.\n\nEngage in a group discussion where each participant shares their understanding of the key concepts learned in this lesson. You can reflect on real-world scenarios where decision-making and conditional programming are applicable. Feel free to ask questions, seek clarifications, or provide examples that demonstrate the concepts.\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\n\n\n\\subsection{Practical Exercise: if + Boolean + string + input [60 mins]}\n\\subsubsection*{Exercise 1}\n\\textbf{Description:} \\newline\nIn this exercise, you will have the opportunity to practice using conditional statements in Python to make decisions based on different conditions. Conditional statements allow your programs to perform different actions depending on the values of certain variables. You have already learned about the if, if-else, and if-elif-else statements, which are powerful tools for controlling the flow of your code.\n\n\\textbf{Instructions:}\\newline\nWrite a Python program that implements a simple grading system based on a student's score in an exam. The program should take the student's score as input and provide them with a corresponding letter grade according to the following criteria:\n\\begin{itemize}\n    \\item A: 90-100\n    \\item B: 80-89\n    \\item C: 70-79\n    \\item D: 60-69\n    \\item F: 0-59\n\\end{itemize}\n\nFollow these steps to complete the exercise:\n\\begin{itemize}\n    \\item \\textit{Input: }Prompt the user to enter their exam score using the input() function. Remember to convert the input to an integer using the int() function.\n\\item \\textit{Conditional Statements:} Use the if-elif-else statement to determine the appropriate letter grade based on the input score. Construct your conditions to cover the different score ranges mentioned above.\n\\item \\textit{Output:} Print out the student's score along with the corresponding letter grade.\n\\item \\textit{Testing:} Test your program with different input values to ensure it produces accurate results for various scores.\n\\end{itemize}\n\n\n\n\n\n\n\n\n\n\n\\subsubsection*{Exercise 2}\n\\textbf{Description:}\\newline\nIn this exercise, you will have the opportunity to build a simple calculator program in Python that performs basic calculations based on user inputs. The program will take three inputs from the user: two numbers and an operation. It will then carry out the specified operation on the numbers and display the result. This exercise will help you practice using conditional statements to control program flow and perform different calculations.\n\n\\textbf{Instructions:} \\newline\nCreate a Python program that follows these steps:\n\n\\begin{itemize}\n    \\item  \\textit{Input}: Prompt the user to enter two numbers (num1 and num2) and the desired operation (operation). Use the input() function to receive these values from the user. Remember to convert the input numbers to integers using the int() function.\n\n\\item \\textit{Conditional Statements}: Implement a series of conditional statements (if, elif, and else) to determine the correct operation based on the user's input. Here are the operation cases to handle:\n\n\\begin{itemize}\n    \\item If the operation is \"add\", perform the addition operation (num1 + num2).\n    \\item If the operation is \"subt\", perform the subtraction operation (num1 - num2).\n    \\item If the operation is \"mult\", perform the multiplication operation (num1 * num2).\n    \\item If the operation is \"div\", perform the division operation (num1 / num2).\n    \\item If the operation is anything other than these four, print \"Invalid operation\" as an error message.\n\\end{itemize}\n\n\n\n\n\n\\item \\textit{Output}: If the operation was valid, display the result of the calculation to the user.\n\n\\item \\textit{Testing:} Test your program with different input combinations to ensure it produces accurate results for various operations.\n\\end{itemize}\n\n%You are to write a Python program that can handle basic calculations based on user inputs. The user will provide 3 different inputs: 2 of them are numbers, and the last one is the operations (\"add\", \"subt\", \"mult\", \"div\").\n\n%The program will start by taking the input values from the user (num1 [int], num2 [int], operation [string]). \n%\\begin{itemize}\n%    \\item If the operation is \"add\", Python will add both numbers (num1 + num2).\n%    \\item If the operation is \"subt\", Python will subtract the second number from the first (num1 - num2).\n%    \\item If the operation is \"mult\", Python will multiply both numbers (num1 * num2).\n%    \\item If the operation is \"div\", Python will divide the first number by the second (num1 / num2).\n%    \\item If any other operation was input (anything other than these 4), then the program will display an error to the user, printing \"invalid operation\".\n%\\end{itemize}\n%if the operation was valid, the program will input the final result.\n   \n\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\\subsection{Model Answer(s): if + Boolean + string + input}\n[CONTENT]\n\n\n\\subsection{Share and Compare: if + Boolean + string + input [60 mins]}\n\\subsubsection*{Your task}\n[short introduction to the activity, followed by a succinct explanation of the task(s)]\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}