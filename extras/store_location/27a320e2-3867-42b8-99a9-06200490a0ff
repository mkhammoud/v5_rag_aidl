{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 5: Variables [60 mins]}\n\\subsection{Introduction}\nWelcome to Lesson 5 of the Python for Applied AI course! In this lesson, we will explore the concept of variables in Python. Variables are fundamental building blocks of programming and play a crucial role in applied AI. We will cover the basics of variables, including their declaration, assignment, naming conventions, and various data types in Python.\n\n\n\n\\subsection{What Are Variables?}\nVariables are like labeled boxes where we can store different types of information. They give us a way to refer to and manipulate data in our programs. For example, if we want to store a person's age, we can create a variable called age and assign the value to it. Variables can hold numbers, text (string), and other types of data. The type is inferred based on the value assigned to it.\n\n\\subsection{Variable Declaration and Assignment}\nTo declare a variable, you simply assign a value to it using the equals sign (=). For example:\n\n\\begin{lstlisting}[language=Python]\nage = 25\nname = \"John Doe\"\n\\end{lstlisting}\n\nHere, we declared two variables: 'age' and 'name'. The variable age is assigned the value 25, and name is assigned the string \"John Doe\". Notice how we don't need to specify the type explicitly. \n\nThink of a variable as a labeled box that a value is placed in the figure below.\n\n\\begin{figure}[h]\n    \\centering    \\includegraphics[scale=0.5]{Images/variable.png}\n    % \\caption{}\n\\end{figure}\n\n\n\\subsection{Naming Convention}\nNote that a variable can take any name but with certain rules. When choosing variable names, it's important to follow some guidelines to make your code more readable and maintainable. Here are some best practices to keep in mind:\n\n\\begin{itemize}\n    \\item Start with a letter: Variable names in Python must begin with a letter (a-z, A-Z) or an underscore (\\_). They cannot start with a number or any other special character.\n    \\item Use only letters, digits, and underscores: Variable names can consist of letters (a-z, A-Z), digits (0-9), and underscores (\\_). They cannot contain spaces or special characters like \\@, \\#, \\$, etc.\n    \\item Case-sensitive: Python is case-sensitive, meaning variables with different capitalization are treated as separate entities. For example, \"count\" and \"Count\" are considered distinct variables.\n    \\item Avoid using reserved keywords (words that have special meaning in Python) as variable names. For example, you can't use if, \\textit{for}, or \\textit{while} as variable names.\n    \\item Variable names should be descriptive and meaningful, so others can understand their purpose.\n    % \\item Avoid using single letters: While single-letter variable names like \"x\" and \"y\" are valid, it's best to avoid them in most cases. Use more descriptive names to enhance code clarity.\n    \\item Be mindful of length: Keep variable names concise but informative. Overly long names can make the code harder to read.\n    \\item Use meaningful abbreviations: If abbreviations are necessary, use common and meaningful ones. For example, \"num\" for \"number\" or \"info\" for \"information.\"\n\\end{itemize}\n\n\\textbf{Good Examples:}\n\\begin{lstlisting}[language=Python]\nage = 25\nname = \"John\"\ntotal_students = 100\n\\end{lstlisting}\nFollow a consistent style: Consistency in variable naming improves code readability. Choose a naming style (e.g., camelCase, snake\\_case) and stick to it throughout your codebase.\n\n\\textit{Camel Case Example:}\n\\begin{lstlisting}[language=Python]\nnumberOfStudents = 50\ntotalMarksScored = 500\n\\end{lstlisting}\n\n\\textit{Snake Case Example:}\n\\begin{lstlisting}[language=Python]\nnumber_of_students = 50\ntotal_marks_scored = 500\n\\end{lstlisting}\n\n\n\\subsection{Variable Reassignment and Updating}\nOnce a variable is declared, we can change its value by assigning a new value to it. This is called variable reassignment. For example:\n\n\\begin{lstlisting}[language=Python]\nx = 5\nx = 10  # Variable x is reassigned the value 10, so x is not longer 5 after this line.\n\\end{lstlisting}\nIn this case, the variable x initially held the value 5, but we changed it to 10 later.\n\nVariables can also be updated using their existing values. For example:\n\\begin{lstlisting}[language=Python]\ncount = 0\ncount = count + 1  # Incrementing the value of count by 1\ncount += 1 #Incrementing the value of count by 1\ncount -= 1 #Decrementing the value of count by 1\ncount *= 2 #Multiplying the value of count by 2\ncount /= 2 #Dividing the value of count by 2\n\\end{lstlisting}\nHere, we incremented the value of the count variable by 1. \n\nThis is a common pattern in AI programming, where variables are frequently updated during computations or iterations.\n\n\\subsection{Basic Data Types in Python}\nPython supports several data types that can be assigned to variables. Here are some basic data types:\n\n\\begin{itemize}\n    \\item Integer: Represents whole numbers, like '5' or '-10'\n    \\item Float: Represents decimal numbers, like '3.14' or '-0.5'\n    \\item String: Represents a sequence of characters, like \"Hello\", \"World\", or \"Hello World\"\n    \\item Boolean: Represents either 'True' or 'False'. Usually used for logical operations.\n    \\item List: Represents an ordered collection of items.\n    \\item Tuple: Represents an immutable collection of items.\n    \\item Dictionary: Represents a collection of key-value pairs.\n\\end{itemize}\n\nUnderstanding various data types will help you work with various kinds of information in applied AI.\n\n\\subsection{Summary}\nIn this lesson, we covered the fundamentals of variables in Python. We learned that variables are like labeled boxes that store data. We explored how to declare variables, assign values to them, follow naming conventions for readability, and update variable values. We also introduced basic data types in Python.\nVariables are crucial in applied AI as they allow us to store and manipulate data. By understanding variables and their usage, you have gained a solid foundation for working with data and performing various operations in applied AI.\n\nNow, let's practice what you've learned! In the next lesson, we will delve into the topic of strings and how they can be manipulated in Python.\n\n\n\\subsection{Exercise: Tracing Numerical Variables [30 mins]}\n\\subsubsection*{Question 1}\n\nWhat will be the output after executing the following Python code?\n\n\\begin{lstlisting}[language=Python]\nx = 54\nprint(x)\nx = 4\nx += 1\nprint(x)\nx *= 42\nprint(x)\n\\end{lstlisting}\n\na) 54, 4, 42\nb) 54, 5, 210\nc) 4, 5, 210\nd) 4, 42, 1764\n\nAnswer: b) 54, 5, 210\n\n% Explanation:\n\n% After the first print(x), the value of x is 54.\n% Then, x is reassigned to 4 and incremented by 1, resulting in x being 5.\n% Finally, x is multiplied by 42, giving the final value of 210.\n\n\\subsubsection*{Question 2}\nWhat will be the output after executing the following Python code?\n\\begin{lstlisting}[language=Python]\nx = 8\ny = 3\nx *= y\ny += 1\nx /= y\nprint(y)\n\\end{lstlisting}\n\na) 3\nb) 4\nc) 8\nd) 9\n\nAnswer: b) 4\n\n% Explanation:\n\n% The initial value of x is 8, and y is 3.\n% x is multiplied by y, resulting in x being 24.\n% y is then incremented by 1, becoming 4.\n% Finally, x is divided by y, resulting in x being 6, but the output is not asked for, only the value of y is printed, which is 4.\n\n\\subsection{Practical Exercise: Fahrenheit to Celsius Conversion [30 mins] }\n\\subsubsection*{Your task}\nWrite a program in Python to convert temperatures from Fahrenheit to Celsius. You will assign a value to the fahrenheit variable in your program. Perform the conversion and display the result in Celsius. Trace the change in variable values at different stages of the program.\n\n\\begin{enumerate}\n    \\item Declare a variable fahrenheit and assign it a value representing a temperature in Fahrenheit. Choose any value you like, such as 75.0 or 98.6.\n    \\item Declare another variable celsius and assign it the converted temperature in Celsius. Use the formula (fahrenheit - 32) * 5/9 to perform the conversion.\n    \\item Print the value of fahrenheit using the print() function to trace its initial value.\n    \\item Print the value of celsius using the print() function to trace the calculated Celsius value.\n    \\item Reassign a new value to fahrenheit, for example, fahrenheit = 100.0. Print the updated fahrenheit to trace the change.\n    \\item Recalculate the value of celsius using the updated fahrenheit value. Print the new value of celsius after the update.\n    \\item In a different cell, experiment with different values for fahrenheit to practice converting temperatures. You can try values like 32.0, 212.0, and 98.6.\n    \\item Explore different data types for fahrenheit (e.g., integer, floating-point) and observe how the result changes.\n    \\item Add additional print() statements at different points in your code to trace the changes in variable values.\n    \\item After completing the exercise, share your code and compare the outcomes with other students. Discuss any challenges you encountered and the strategies you used to overcome them.\n\\end{enumerate}\n\n\\subsubsection*{Guidelines}\n\n\\subsection{Model Answer(s): Tracing Numerical Variables}\n[Page content]\n\n\n\n\nAfter posting your reply on the discussion forum, consider your colleagues' posts and reply to at least two of them. Are there any commonalities between your answer and those of your colleagues? What additional insight did you gain?\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}