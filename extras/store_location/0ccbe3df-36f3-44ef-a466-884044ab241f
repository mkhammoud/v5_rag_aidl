{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 3: Integrated Development Environments (IDEs) [80 mins]}\n\\subsection{Introduction}\nThis lesson is the first milestone for any programmer, it's the 'Hello World' milestone. It is the point that introduces novice programmers to a particular programming language which is the Python language in our case. In order to run your first program, programmers require an efficient environment to run and execute their code. Such an environment is referred to the Integrated Development Environment (IDE). In this lesson, you are going to learn about an effective Python IDE, which is the Jupyter Notebook, and its capabilities. During the lesson, you will identify the importance of using an IDE for programming with Python. Furthermore, you are going to install your first IDE for running a Python program.  \n\n\n\\subsection{IDEs and Their Significance in Programming}\nTo begin, let's understand what an IDE is and its role in programming. An IDE is a software application that combines code editing features, debugging tools, and project management capabilities into a single integrated environment. IDEs provide a convenient and efficient way to write, edit, and execute code, making the development process smoother and more productive.\n\nBefore the advent of Integrated Development Environments (IDEs), programmers used text editors and command-line interfaces to write and run their programs. Here is a brief overview of the traditional workflow without IDEs:\n\n\\begin{itemize}\n    \\item Writing Code: Programmers used text editors, such as Notepad or Vim, to manually write the source code. These text editors provided basic features like syntax highlighting to make the code more readable.\n    \\item Compiling (if applicable): For compiled languages like C or C++, programmers would use a separate compiler to translate the source code into machine-readable instructions. The compiler would generate an executable file that could be run on the target platform.\n    \\item Running the Program: After compiling (if necessary), programmers would use the command-line interface to execute the program. They would navigate to the appropriate directory and type the command to run the compiled executable or interpreted code directly.\n    \\item Debugging: Without an integrated debugger, programmers would rely on print statements or logging to identify and fix issues in their code. They would manually analyze the output and make modifications to resolve any errors or unexpected behavior.\n\\end{itemize}\n\nThis traditional approach required a solid understanding of programming languages, command-line tools, and debugging techniques. It placed a greater emphasis on manual steps and required programmers to manage dependencies, compilation settings, and execution environments on their own.\n\nWith the introduction of IDEs, the development process became more streamlined and user-friendly. IDEs combine various tools and features into a unified interface, providing a more efficient and integrated workflow for writing, running, debugging, and managing code.\n\n\\subsection{Popular IDEs for Python Development}\nNow, let's dive into some popular IDEs used for Python programming. We will introduce three widely recognized IDEs: PyCharm, Visual Studio Code, and Jupyter Notebook. Each IDE has its unique features, strengths, and community support. We will highlight their capabilities, availability on different platforms, and discuss why they are preferred by many Python developers. \n\n\\begin{tabular}{|c|c|c|}\n    \\hline\n    \\textbf{\\textit{IDE}} & \\textbf{\\textit{Developer}} & \\textbf{\\textit{Features}} \\\\\n    \\hline\n    \\hline\n    \\textbf{PyCharm} & JetBrains & \\shortstack{Code editing, \\\\debugging, \\\\version control}\\\\\n    \\hline\n    \\textbf{Visual Studio Code} & Microsoft & \\shortstack{Lightweight,\\\\ customizable,\\\\ and extensive\\\\ extension ecosystem}\\\\\n    \\hline\n    \\textbf{Jupyter Notebook} & Jupyter Development Team & \\shortstack{Web-based, interactive\\\\ coding environment,\\\\ combining code, visualizations,\\\\ and explanatory text}\\\\\n    \\hline\n\\end{tabular}\n\nJupyter Notebook is often considered a better choice for beginners due to its user-friendly and interactive nature. Here are some key reasons why Jupyter Notebook is well-suited for beginners:\n\n\\begin{itemize}\n    \\item User-Friendly Interface: Jupyter Notebook provides a beginner-friendly web-based interface for writing and executing code.\n    \\item Interactive Execution: Beginners can execute code in individual cells and see immediate results, promoting hands-on learning and easier error debugging.\n    \\item Documentation and Explanation: Jupyter Notebook supports the inclusion of explanations and visualizations alongside code, facilitating clear and concise explanations.\n\\end{itemize}\n\n\\subsection{Setting up and Configuring an IDE for Python Programming}\nNow, let's dive into Jupyter Notebook and get familiar with its interface and functionalities. We will provide visual illustrations and demonstrate how Jupyter Notebook organizes code into cells, allowing you to execute code one cell at a time and view the results interactively. We will also showcase the Markdown cells, which enable you to add explanatory text, images, and formatted content to your notebooks.\n\n\\includegraphics[width=\\textwidth]{Images/video_resource.png}\nTitle: LAU AAI2 W1 L3 JUPYTER NOTEBOOK INTRO.MP4.\n\n\n\n\\subsubsection{Step 1: Install Python}\n\\begin{itemize}\n    \\item Visit the official Python website at \\url{https://www.python.org/} and click on the \"Downloads\" tab.\n    \\item Download the latest version of Python for your operating system (Windows, macOS, or Linux).\n    \\item Run the installer and follow the instructions to install Python.\n\\end{itemize}\n\n\\subsubsection{Step 2: Open the Command Prompt (CMD)}\n\\begin{itemize}\n    \\item On \\textbf{\\textit{Windows}}, press the Windows key, type \"cmd\", and press Enter to open the Command Prompt.\n    \\item On \\textbf{\\textit{macOS}}, open the \"Terminal\" application.\n    \\item On \\textbf{\\textit{Linux}}, open any terminal application of your choice.\n\\end{itemize}\n\n\\subsubsection{Step 3: Install Jupyter Notebook using pip}\n\\begin{itemize}\n    \\item In the Command Prompt (CMD) or Terminal, type the following command and press Enter to install Jupyter Notebook using pip:\n    \\begin{verbatim}\n    > pip install jupyter\n    \\end{verbatim}\n    \\item \\textit{Note}: pip is a package manager for Python that allows you to install and manage software packages written in Python. It simplifies the process of installing external libraries and tools.\n\\end{itemize}\n\n\\subsubsection{Step 4: Launch Jupyter Notebook}\n\\begin{itemize}\n    \\item In the same Command Prompt (CMD) or Terminal, type the following command and press Enter:\n    \\begin{verbatim}\n    > jupyter notebook\n    \\end{verbatim}\n\\end{itemize}\n\n\\subsection{Basic Features and Functionalities of an IDE}\nBasic Features and Functionalities of Jupyter Notebook:\n\n\\begin{enumerate}\n    \\item Write and Run Code:\n    \\begin{itemize}\n        \\item Jupyter Notebook lets you write and run small pieces of code, like puzzle pieces, one at a time.\n        \\item You can see the results of your code immediately.\n    \\end{itemize}\n    \\item Add Text and Explain:\n    \\begin{itemize}\n        \\item Jupyter Notebook allows you to write explanations and notes alongside your code.\n        \\item You can use plain English to describe what the code does, making it easier to understand.\n    \\end{itemize}\n    \\item Draw and Show:\n    \\begin{itemize}\n        \\item Jupyter Notebook lets you include pictures, videos, and other cool things in your notes and code.\n        \\item You can even create your own charts and graphs to visualize data in a fun way!\n    \\end{itemize}\n    \\item Take Notes:\n    \\begin{itemize}\n        \\item Jupyter Notebook is like a digital notebook where you can take notes while learning or working on projects.\n        \\item You can organize your ideas, write reminders, and keep track of what you're learning.\n    \\end{itemize}\n    \\item Share and Work Together:\n    \\begin{itemize}\n        \\item Jupyter Notebook allows you to share your work with others, like passing your notebook to a friend.\n        \\item You can collaborate on projects, share ideas, and learn together.\n    \\end{itemize}\n    \\item Show Your Work:\n    \\begin{itemize}\n        \\item Jupyter Notebook helps you present your work by letting you turn your notebook into different formats, like a webpage or a PDF.\n        \\item You can show your awesome work to others even if they don't have Jupyter Notebook.\n    \\end{itemize}\n\\end{enumerate}\n\nAs you start coding and learning more, you'll discover even more exciting things you can do with Jupyter Notebook!\n\n\\subsection{Output of the first program}\nIn this part of the lesson, we guide you through a step-by-step process to run your first Python program.\n\n\\includegraphics[width=\\textwidth]{Images/video_resource.png}\nLAU AAI2 W1 L3 FIRST PROGRAM.MP4\n\n\\subsubsection{Step 1: Launch Jupyter Notebook}\n\\begin{itemize}\n    \\item Open the Command Prompt (Windows) or Terminal (macOS/Linux).\n    \\item Type the following command and press Enter:\n    \\begin{verbatim}\n    > jupyter notebook\n    \\end{verbatim}\n    \\item Your web browser should open, displaying the Jupyter Notebook interface.\n\\end{itemize}\n\\subsubsection{Step 2: Create a New Notebook}\n\\begin{itemize}\n    \\item In the Jupyter Notebook interface, click on the \"New\" button on the right side.\n    \\item Select \"Python 3\" to create a new notebook.\n\\end{itemize}\n\\subsubsection{Step 3: Write Your First Code}\n\\begin{itemize}\n    \\item In the first empty code cell, type the following code:\n    \\begin{lstlisting}[language=Python]\n    print(\"Hello, World!\")\n    \\end{lstlisting}\n\\end{itemize}\n\\subsubsection{Step 4: Run Your Code}\n\\begin{itemize}\n    \\item Click on the code cell to select it.\n    \\item Press Shift+Enter to run the code.\n    \\item \\textbf{or} you can click on the run button on the top bar.\n\\end{itemize}\n\\subsubsection{Step 5: View the Output}\n\\begin{itemize}\n    \\item After running the code, you should see the output \"Hello, World!\" displayed below the code cell.\n\\end{itemize}\n\\subsection{Summary}\nIn Lesson 3, we reached a significant milestone in our Python for Applied AI course by familiarizing ourselves with the Integrated Development Environment (IDE), specifically focusing on Jupyter Notebook. As a crucial tool for any programmer, an IDE provides an efficient environment to write, run, and manage code. By installing Jupyter Notebook, we took our first step towards effective Python programming.\n\nWith a solid understanding of IDEs and their significance, we are now equipped to explore the numerical data types and arithmetic operations in Python in the upcoming lesson.\n\n\n\n\\subsection{Practical Exercise: Output of the First Program [30 Mins]}\n\\subsubsection*{Your task}\n% [short introduction to the activity, followed by a succinct explanation of the task(s)]\n\\begin{itemize}\n    \\item This exercise will allow you to practice using the print statement to display a simple message in Python.\n    \\item Follow the task below and write your code in a single code cell in the Jupyter Notebook.\n\\end{itemize}\n\n\\begin{enumerate}\n    \\item Write a Simple Message:\n    \\begin{itemize}\n        \\item Write a print statement that displays a simple message of your choice. Refer to the previous lesson on how to print a different text.\n        \\item It can be a basic greeting, a word of encouragement, or any short statement you'd like to see on the screen.\n    \\end{itemize}\n    \\item Display the Message:\n    \\begin{itemize}\n        \\item Run the code cell to display your printed message in the output.\n    \\end{itemize}\n\\end{enumerate}\n\nOnce you have written the code and run the code cell, you will see your simple message displayed in the output. Enjoy experimenting with different messages and using the print statement to communicate your thoughts in Python!\n\n\\subsubsection*{Guidelines}\n[]", "metadata": {"source": "./full-course/aai.txt"}}}