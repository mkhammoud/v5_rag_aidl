{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 2: Modules, Packages, and Libraries}\n\\subsection{Introduction}\n\nThe vast majority of software programs are indeed complex and would be incredibly time-consuming if developers had to write every single line of code from scratch. This is where modular programming comes to the rescue. Instead of reinventing the wheel, developers take advantage of existing modules and libraries. These pre-built pieces of code contain commonly used functions and tools, making it much easier to create complex programs.\n\nBy using modules and libraries, developers can save time and effort. They can focus on the unique aspects of their projects while relying on well-tested and established code for common tasks. This not only speeds up development but also enhances the reliability and maintainability of the software. It's a smart and efficient approach that helps programmers bring their ideas to life without being overwhelmed in the details of every little function.\n\n\n\n\n\\subsection{Modules}\nModules are files that contain related code. They have the \\textit{.py} extension. The code may contain functions, classes, or variables. The functionality of the module is assumed to be well-tested, thus, the developer doesn't need to care much about debugging the module parts. The main idea is that a module can be imported into our current project to reduce coding everything from scratch. Simply, by importing the module into our current project, we can then utilize its functions, classes, and variables.\n\n\\subsubsection{Using Standard Modules}\nOne of the most utilized modules of Python can be the \\textit{Random} module. The random module is used to generate random numbers and perform random operations. It's a part of the Python Standard Library, so we don't need to install anything to use it. Here are some common use cases for the random module:\n\\begin{lstlisting}[language=Python]\nimport random\n\nrandom_number = random.random()\nprint(random_number)\n\\end{lstlisting}\n\nFirst of all, we imported the module (line 1), then, we used it by calling the name of the module first and the function needed after.\nThere are many other usages of the Random module, such as generating an integer between two numbers or selecting a random item from a list. Below are two examples that showcases these functionalities:\n\\begin{lstlisting}[language=Python]\nimport random\n\nrandom_integer = random.randint(1, 10)  # Generates a random integer between 1 and 10 (inclusive)\nprint(random_integer)\n\\end{lstlisting}\n\n\\begin{lstlisting}[language=Python]\nimport random\n\nitems = ['apple', 'banana', 'cherry', 'date']\nrandom_item = random.choice(items)\nprint(random_item)\n\\end{lstlisting}\n\n\n\\subsubsection{Using Custom Modules}\nAn example of how we import and use a custom module can be the following:\n\\begin{enumerate}\n    \\item Let us assume that we have a module called 'medical.py' which has relevant code that gives us stats about patients' records.\n    \\item In parallel, we are planning to build a Python program that can deal with the patients' records. We want to utilize code chunks from the 'medical' module\n\\end{enumerate}\n\nThe module medical.py can contain the following code.\n\\begin{lstlisting}[language=Python]\ndef calculate_average_age(patients):\n    ages = [patient['age'] for patient in patients]\n    return sum(ages) / len(ages)\n\ndef calculate_patient_count(patients):\n    return len(patients)\n\\end{lstlisting}\n\nThe module main.py can contain the following code.\n\\begin{lstlisting}[language=Python]\nimport medical\n\n# Sample patient records\npatients = [\n    {'name': 'Alice', 'age': 35},\n    {'name': 'Bob', 'age': 42},\n    {'name': 'Charlie', 'age': 28},\n    {'name': 'David', 'age': 55},\n]\n\n# Calculate and print average age\naverage_age = medical.calculate_average_age(patients)\nprint(f\"Average Age of Patients: {average_age:.2f} years\")\n\n# Calculate and print the number of patients\npatient_count = medical.calculate_patient_count(patients)\nprint(f\"Total Number of Patients: {patient_count}\")\n\\end{lstlisting}\n\nUsually, the medical.py file is saved in the same directory as the main.py file. Notice how the first line of the main.py file indicates that we want to import the medical file into our main file. It is as if we are loading the content of the medical file into our main file.\n\n\n\\subsection{Practical Exercise: Importing Modules in Jupyter Notebook}\n\\subsubsection*{Importing The Medical Module}\nIn this exercise, we'll learn how to load a module into our program and use its functions. We have a program that deals with patient records and calculates statistics. To do this, we need to import the 'medical' module, which contains the necessary functions.\n\\begin{enumerate}\n    \\item Open a new Jupyter Notebook.\n    \\item Create a Python code cell and paste the following code into it. This code represents our program that works with patient records:\n    \\begin{lstlisting}[language=Python]\n# Sample patient records\npatients = [\n    {'name': 'Alice', 'age': 35},\n    {'name': 'Bob', 'age': 42},\n    {'name': 'Charlie', 'age': 28},\n    {'name': 'David', 'age': 55},\n]\n\n# Calculate and print average age\naverage_age = medical.calculate_average_age(patients)\nprint(f\"Average Age of Patients: {average_age:.2f} years\")\n\n# Calculate and print the number of patients\npatient_count = medical.calculate_patient_count(patients)\nprint(f\"Total Number of Patients: {patient_count}\")\n\\end{lstlisting}\n    \\item Execute the code cell. You will encounter an error because we haven't imported the 'medical' module yet.\n    \\item Now, your task is to import the 'medical' module correctly so that the code can run without errors. Intuitively, the 'medical' module contains the following functions: medical.calculate\\_average\\_age(...) and medical.calculate\\_patient\\_count(...). \n    To import the module, you should add an import statement at the beginning of the code cell.\n    Hint: To import the 'medical' module, you can use the import keyword followed by the module name.\n    \\item After importing the 'medical' module, execute the code cell again. Ensure that it runs successfully and calculates the average age of patients and the total number of patients.\n\\end{enumerate}\n\n\n\\subsection{Model Answer: Importing Modules in Jupyter Notebook}\nBelow we indicate how we can import the module to the Jupyter file and utilize its functions.\n\\includegraphics[width=\\textwidth]{Images/s1.png} %image1\n\\includegraphics[width=\\textwidth]{Images/s2.png} %image2\n\\includegraphics[width=\\textwidth]{Images/s3.png} %image3\n\nNote That in the last figure we imported the medical in the same cell as the code where we are using it. However, it is also practical to load it first in a separate cell and then use it, like the following Notebook:\n\n\\includegraphics[width=\\textwidth]{Images/s4.png} %image3\n\n\n\\subsection{Packages and Libraries}\nA package is a collection of modules that are grouped together. Mainly, we simplify managing the modules by grouping them into packages. There are many open-source Python packages such as Numpy and Pandas, which we will explore in depth in the upcoming lessons. \n\nA Library is a collection of packages and modules. Sometimes, some programmers might refer to Packages and Libraries interchangeably due to their similarities. However, it is assumed that a package contains modules, and a library contains packages. We will explore later how they can be installed an used\n\n\n\n\n\\subsection{Summary}\nIn this lesson on Modules, Packages, and Libraries in Python, we delved into essential aspects of structuring and organizing code to build efficient and scalable software. These concepts are pivotal in the realm of programming and offer developers powerful tools for managing complexity and reusability.\n\nModules are the building blocks of Python code organization. They are individual Python files, typically with a .py extension, that encapsulate related functions, classes, or variables. Modules provide an effective means to compartmentalize code, making it more maintainable and readable. They enable code reuse by allowing developers to import and utilize existing code segments in their projects, eliminating the need to reinvent solutions for common problems. We explored how to import both standard Python modules, like 'random' for generating random numbers, and custom modules created by developers to modularize their code effectively.\n\nMoving beyond modules, we introduced the concepts of Packages and Libraries. Packages are collections of modules, grouped together to provide a higher level of organization and structure. They simplify the management of related modules by creating a hierarchical structure within our project. Libraries, on the other hand, encompass not only packages but also other libraries, forming a comprehensive collection of code resources. We hinted at the vast landscape of open-source Python packages and libraries, such as Numpy and Pandas, that greatly extend Python's capabilities and are widely used in various domains.\n\nIn essence, this lesson has equipped us with essential knowledge on how to structure and manage code effectively using modules, packages, and libraries.", "metadata": {"source": "./full-course/aai.txt"}}}