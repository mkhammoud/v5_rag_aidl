{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 4: File handling in Python [60 mins]}\n\\subsection{Introduction}\nIn programming, we often need to store data for later use, and one way to do this is by working with files. Files allow us to save information that can be accessed even after our program has finished running. In this lesson, we will explore the basics of working with files in Python. We'll learn how to create, read, and save files on your computer's hard drive.\n\n\n\n\\subsection{Files and File Paths}\n\\begin{itemize}\n    \\item A file has two essential properties: a filename and a path.\n    \\item The filename is the name of the file, and the path specifies where the file is located on your computer.\n    \\item For example, a file named \"projects.docx\" can be found at the path \"C:\\\\Users\\\\asweigart\\\\Documents\" on a Windows computer.\n    \\item The part of the filename after the last period is called the file's extension, which tells us the file's type (e.g., \".docx\" for a Word document).\n    \\item Folders (also known as directories) can contain files and other folders, creating a hierarchical structure.\n\\end{itemize}\n\n\\textbf{{Example File Hierarchy}}\n\\begin{lstlisting}[language=Python]\nC:\\\n|-- Users\n|   |-- asweigart\n|   |   |-- Documents\n|   |   |   |-- projects.docx\n\\end{lstlisting}\n\n\\begin{itemize}\n    \\item The root folder is the top-level folder that contains all other folders. On Windows, it's usually \"C:\" (the C: drive).\n    \\item On different operating systems, paths and folder structures may look slightly different.\n\\end{itemize}\n\n\\textbf{Paths Separators}\n\\begin{itemize}\n    \\item On Windows, paths use backslashes () as separators (e.g., \"C:\\\\Users\\\\asweigart\\\\Documents\").\n    \\item On macOS and Linux, paths use forward slashes (/) as separators (e.g., \"/Users/asweigart/Documents\").\n    \\item To write cross-platform code, we can use the \\textbf{'os.path.join()'} function to join folder and file names, ensuring the correct separator is used.\n\\begin{lstlisting}[language=Python]\nimport os\npath = os.path.join('Users', 'asweigart', 'Documents', 'projects.docx')\n\\end{lstlisting}\n\\end{itemize}\n\n\\textbf{The Current Working Directory}\nEvery program running on a computer has a \\textbf{current working directory} (cwd).\nFile and folder names that do not start with a root folder are assumed to be under the current working directory.\nWe can get the current working directory with \\textbf{'os.getcwd()'} .\n\n\\begin{lstlisting}[language=Python]\nimport os\ncurrent_dir = os.getcwd()  # Get the current working directory\n\\end{lstlisting}\n\n\\subsection{Reading From a File}\nIn Python, reading files is a fundamental skill that allows your programs to access and process data stored in files. In this lesson, we'll explore how to open, read, and work with plaintext files, which contain basic text characters.\n\n\\subsubsection{Understanding File Types}\nBefore we dive into reading files, it's important to distinguish between two main types of files:\n\\begin{enumerate}\n    \\item \\textbf{Plaintext Files:}\n    \\begin{itemize}\n        \\item Contain only basic text characters.\n        \\item Examples include files with the \".txt\" extension or Python script files with the \".py\" extension.\n        \\item These files can be opened and read as ordinary text.\n        \\item They are easily readable and editable with text editors like Notepad (Windows) or TextEdit (macOS).\n    \\end{itemize}\n    \\item \\textbf{Binary Files:}\n    \\begin{itemize}\n        \\item Include all other file types, such as Word documents, PDFs, images, spreadsheets, and executable programs.\n        \\item When opened in a text editor, binary files appear as scrambled or unreadable data.\n        \\item Reading and writing binary files directly requires specialized handling.\n    \\end{itemize}\n\\end{enumerate}\nIn this lesson, we'll focus on working with plaintext files. Plaintext is what mainly datasets contain.\n\n\\subsubsection{The Three Steps of File Reading/Writing}\nReading or writing files in Python involves three key steps:\n\n\\begin{enumerate}\n    \\item \\textbf{Open the File:} To access a file, we use the \\textbf{'open()'} function, which returns a File object.\n    \\item \\textbf{Read/Write Data:} We read or write data using methods provided by the File object.\n    \\item \\textbf{Close the File:} After finishing with the file, it's essential to close it using the \\textbf{'close()'} method to free up system resources.\n\\end{enumerate}\n\n\\subsubsection{Opening Files with open()}\nTo open a file, we use the \\textbf{'open()'} function, passing it a string representing the file's path. The path can be either an absolute or relative path. For example:\n\n\\begin{lstlisting}[language=Python]\n# On Windows\nfile_path = 'C:\\\\Users\\\\your_home_folder\\\\hello.txt'\nhello_file = open(file_path)\n\n# On macOS or Linux\nfile_path = '/Users/your_home_folder/hello.txt'\nhello_file = open(file_path)\n\\end{lstlisting}\n\nHere, replace \\textbf{'your\\_home\\_folder'} with your actual computer username. The \\textbf{'open()'} function returns a File object, which represents the opened file.\n\nBy default, files are opened in \\textbf{read mode}, allowing us to read data from the file. Read mode is the default mode for files opened in Python, but we can explicitly specify the mode if needed.\n\n\\subsubsection{Reading File Contents}\nOnce we have a File object, we can read the file's contents:\n\n\\begin{itemize}\n    \\item To read the entire contents of a file as a single string, use the \\textbf{read()} method.\n    \\begin{lstlisting}[language=Python]\nhello_content = hello_file.read()\n    \\end{lstlisting}\n    \\item To read the file line by line and get a list of string values (one for each line), use the \\textbf{'readlines()'} method.\n    \\begin{lstlisting}[language=Python]\nlines = hello_file.readlines()\n    \\end{lstlisting}\n\\end{itemize}\nWorking with a list of strings can be convenient, especially for files with multiple lines.\n\nThe print function can be used to print the lines read from the file:\n\\begin{lstlisting}[language=Python]\nlines = hello_file.readlines()\nprint(lines)\n\\end{lstlisting}\n\n\\subsection{Writing to a File}\nIn Python, we can write content to a file similarly to how the print() function outputs strings to the screen. This skill is crucial for saving data generated by your programs for later use. In this lesson, we'll explore how to write to files, including different modes for writing and appending data.\n\n\\subsection{File Writing Modes}\nTo write to a file, we need to open it in one of two modes:\n\n\\begin{enumerate}\n    \\item \\textbf{Write Mode ('w'):}\n    \\begin{itemize}\n        \\item Opens the file in write mode, overwriting the existing content or creating a new file if it doesn't exist.\n        \\item Use this mode when we want to start with a fresh file.\n    \\end{itemize}\n    \\item \\textbf{Append Mode ('a'):}\n    \\begin{itemize}\n        \\item Opens the file in append mode, allowing us to add new content to the end of the existing file.\n        \\item Use this mode when we want to preserve the existing content and add new data.\n    \\end{itemize}\n\\end{enumerate}\nIf the file specified in \\textbf{'open()'} does not exist, both write and append modes will create a new, blank file.\n\n\\textbf{Important:} We cannot write to a file that we've opened in read mode \\textbf{('r')}.\n\n\\subsubsection{Writing to a File}\nTo write data to a file, follow these steps:\n\n\\begin{enumerate}\n    \\item Open the file in the desired mode using \\textbf{'open()'}.\n    \\item Use the \\textbf{'write()'} method on the File object to add content to the file. The \\textbf{'write()'} method returns the number of characters written.\n    \\item Close the file when you're done with it using the \\textbf{'close()'} method.\n\\end{enumerate}\n\nHere's an example:\n\\begin{lstlisting}[language=Python]\n# Open a file in write mode and write a string to it\nbacon_file = open('bacon.txt', 'w')\nbacon_file.write('Hello world!\\n')\nbacon_file.close()\n\n# Open the same file in append mode and add more content\nbacon_file = open('bacon.txt', 'a')\nbacon_file.write('Bacon is not a vegetable.')\nbacon_file.close()\n\\end{lstlisting}\n\n\\textbf{Note:} The \\textbf{'write()'} method does not automatically add a newline character \\textbf{('\\\\n')} at the end of the string, so you'll need to add it manually if desired.\n\nBelow is a video showing this example in action.\n\n\\includegraphics[width=\\textwidth]{Images/video_resource.png}\nTitle: LAU AAI2 W3 L4 File Manipulation.MP4.\n\n% \\subsection{Appending a File}\n% [Page content]\n\n\n\n\\subsection{Summary}\nIn this lesson, we've learned the essentials of working with files in Python. We explored how to open, read, and write to files. We now understand the distinction between plaintext and binary files, the different modes for opening files (read, write, and append), and how to perform common file operations. This knowledge equips us to handle data persistence in our Python programs, making it possible to store and retrieve information even after your program has finished running.\n\n\n\\subsection{Practical Exercise: Files [15 mins]}\n\\subsubsection*{Your task}\nOur task in this exercise is simple. We will practice file reading on the heart failure prediction dataset. Below are the steps:\n\n\\begin{enumerate}\n    \\item Read the dataset from the heart.csv file into a list of lists. \n    \\item Print the first and second rows.\n    \\item We can notice that the first row is for columns titles.\n    \\item Do your research to know how to skip reading the first row.\n    \\item Print again and make sure that the first column is omitted.\n\\end{enumerate}\n\n\\subsubsection*{Model Answers}\n\\begin{enumerate}\n\\item {\n    \\begin{lstlisting}[language=Python]\n# Define an empty list to store the data\ndata_list = []\n\n# Open the CSV file for reading\nwith open(\"heart.csv\", \"r\") as file:\n    file.readline()\n    # Read the file line by line\n    for line in file:\n        # Remove trailing newline character and split the line into a list\n        row = line.strip().split(',')\n        \n        # Append the row (list) to the data_list\n        data_list.append(row)\n\n# Now, data_list contains the CSV data as a list of lists\n# You can access individual elements like data_list[row_index][column_index]\nprint(data_list[0])\nprint(data_list[1])\n    \\end{lstlisting}}\n\\end{enumerate}\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\\subsection{Share and Compare: Week Four Exercises [30 mins]}\n\\subsubsection*{Your task}\nDiscussing your solutions and insights will not only strengthen your understanding but also foster a collaborative learning environment.\n\nFeel free to share the outputs of each task and the code we used to achieve them. If we encountered any challenges or found alternative approaches, don't hesitate to share those as well. By engaging in discussions, we can learn from one another's experiences and discover new perspectives reading datasets, writing functions, and using dictionaries, .\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}