{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 1: Input}\n\\subsection{Introduction}\nIn this lesson, we will explore the concept of input for interactive programs. Just as conversations require listening and speaking, computer programs often need to receive information from users. \"Input\" in Python refers to the process of gathering data provided by users during program execution. This data can then be processed and used to make programs more dynamic and responsive. Through the use of the input() function, we'll learn how to prompt users for various types of information, from simple text to numerical values, enabling us to build programs that engage users and adapt based on their input. We elaborate on the User Input feature of Python and how it can be handled in the code.\n\n\\subsection{User Input}\nPython allows users to enter their own text into the program. We need to differentiate between the programmer and the user here. The programmer is the one who has access to the code and writes it. The user is the one who utilizes the program after being written. Think of it like the manufacturer and the customer. The manufacturer builds the product and the customer utilizes it. For the sake of testing, we will play the role of both the manufacturer and the customer (i.e., the programmer and the user). After we finish developing the code, we will test it to interact with it as a user.\n\nPython has this feature of asking users to enter their input, which will affect the results of the program. Simply, we use the syntax \\textit{input()} and store it inside a variable. For example:\n\\begin{lstlisting}[language=Python]\ns1 = input(\"enter your name\")\nprint(\"your name is \" + s1)\n\\end{lstlisting}\n\\textit{input()} is a method that reads content from the user (such as his keyboard when he types), and once the user presses the \\textit{Enter} key, the text that he typed will be provided to the code. The content inside the method \\textit{input} (in this case it is \"enter your name\") is what the user will be prompted/asked to write. For example, if I am a user and I run the above Python code, it will ask me about my name and then store it inside \\textit{s1}, after that it will print the name in the second line.\n\n\\includegraphics[width=\\textwidth]{Images/video_resource.png}\nAdd video LAU-AAI-2-W2-L1-INPUT.MP4\n\n\n\\subsection{Input Numbers}\nBy default, the \\textit{input} stores the value as a string. So even if we entered a number, the number will still be considered as a string. Let's see this example:\n\n\\begin{lstlisting}[language=Python]\nname = input(\"enter your name\") #input: Robot\nage = input(\"enter your age\") #input: 1000\n\nprint(type(name)) #output: <class 'str'>\nprint(type(age)) #output: <class 'str'>\n\\end{lstlisting}\n\nThe \\textit{<class 'str'>} indicates that both \\textit{name} and \\textit{age} are considered strings. Thus, we cannot treat the number as a regular number type. Meaning that the code below will result in an error:\n\\begin{lstlisting}[language=Python]\nage = input(\"enter your age\") #input: 1000\nage2 = age + 1 #THIS IS AN ERROR because age is considered a string\n\\end{lstlisting}\n\nWhat we can do is use the \\textit{int} method to convert from a string into an int, such as the following:\n\\begin{lstlisting}[language=Python]\nage = input(\"enter your age\") #input: 1000\nage = int(age) #We cast the old string age to be an int instead of a string.\nage2 = age + 1 #We can now apply int methods to it.\nprint(age2)\n\\end{lstlisting}\nThis process is called casting. Notice that we stored the casted input inside the same variable since we are not going to use the old variable afterward. However, we can define a new variable if we want to. \nSimilarly, we can cast to a float using the \\textit{float} method, such as:\n\\begin{lstlisting}[language=Python]\ncelsius = input(\"enter the temperature\") #input: 25.5\ncelsius = float(celsius) #We cast the old string celsius to be a float instead of a string.\nfah = (celsius * 9/5) + 32 #we calculate the Fahrenheit value\nprint(fah)\n\\end{lstlisting}\n\nNote that you can directly cast the input while entering it by surrounding the input method with the cast method. For example:\n\\begin{lstlisting}[language=Python]\nage = int(input(\"enter your age\")) #input: 1000\nage2 = age + 1\nprint(age2)\n\\end{lstlisting}\n\n\n\\subsection{Summary}\nIn this lesson, we covered the concept of user input, which allows us to interact with the program by entering our own text. We learned how to use the input() function to prompt the user for input and store their response in a variable. We also discussed the importance of type conversion, especially when dealing with numeric input, to ensure proper manipulation and calculation.\n\n\\subsection{Practical Exercise: Prompting Input}\n\\subsubsection{Your Task}\nWrite a Python program that prompts the user to enter a sentence. The program should then convert the sentence to uppercase and display the uppercase version of the sentence. Provide the Python code to achieve this, including getting the input from the user and performing the uppercase conversion.\n\nHint:\n\\begin{itemize}\n    \\item Use the input() function to get the user's input.\n    \\item Use the .upper() method to convert the input string to uppercase.\n    \\item Print the uppercase version of the sentence using the print() function.\n\\end{itemize} \n\nExample:\n\\begin{lstlisting}\nEnter a sentence: Hello, World!\nUppercase: HELLO, WORLD!\n\\end{lstlisting}\n\n\n\\subsection{Model Answer: Prompting Input}\nThe answer for the previous exercise could be the following:\n\n\\begin{lstlisting}[language=Python]\n# Get input from the user\ninput_string = input(\"Enter a string: \")\n# Convert the input string to uppercase\nuppercase_string = input_string.upper()\n# Print the uppercase string\nprint(\"Uppercase:\", uppercase_string)\n\\end{lstlisting}\n\nBe aware that in programming there is always no \"only one solution is right\". Even if you were approaching the code in a different way while achieving the same results, it means that your code is valid. However, there are some important things to consider. The usage of the \\textit{input()} function is important to resolve the above exercise because the main purpose of this solution is to have our code interacting with the user.", "metadata": {"source": "./full-course/aai.txt"}}}