{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 2: Advanced Data Structure  [240 mins]}\n\\subsection{Introduction}\nIn this lesson, after we learned about lists in the last week, we continue learning about additional helpful datastructures in Python. First, we compare with four different data structures: Tuple, Set, Dictionary, and Lists. Afterward, we delve deeper into Dictionaries where we introduce keys, values, and items. Furthermore, we introduce some built-in Python methods that can be very helpful when dealing with dictionaries. Through real-world examples, we show the usage of Dictionaries in Python. \n\n\\subsection{Defining the Data Structures}\nData structures are the structural form that shape how data is stored, organized, accessed, and manipulated in our programs. Python is equipped with a diverse range of data structures to suit various scenarios. Examples of these structures include List, Dictionary, Tuple, and Set. Selecting the right data structure is crucial to achieving efficient solutions to complex problems. Each data structure can be thought of as a tool, where each is designed for a specific task, enabling us to work smarter not harder.\n\n% List which we already covered, Tuple, Set\n\n\n\\subsection{The Four Main Data Structures}\nThe four main data structures in Python are List, Dictionary, Tuple, and Set. Each one has a different way of retrieving, storing, and managing data.\n\n\\subsubsection{Tuple:} An immutable (i.e. content cannot be modified) ordered collection that can store a mix of data types. Tuples are great for when we want to group related values together, preserving their order and preventing accidental modifications. Tuples are created using parentheses ().\nThey can contain elements of different data types. Let us see an example.\n\n\\begin{lstlisting}[language=Python]\n# Creating an empty tuple\nempty_tuple = ()\n\n# Creating a tuple with numbers\nnumber_tuple = (1, 2, 3, 4, 5)\n\n# Creating a tuple with mixed data types\nmixed_tuple = (10, \"Hello\", 3.14, True, [1, 2, 3])\n\\end{lstlisting}\n\nIn this example, we can see three different ways for creating a tuple in Python. To create an empty tuple, we use empty parentheses, as shown in the 'empty\\_tuple'. Or, we can create a tuple with numbers as shown in the 'number\\_tuple'. Or, we can create a tuple with mixed data types, which can contain Numbers, Strings, Boolean, or even Lists as shown in the 'mixed\\_tuple'.\n\nAccessing elements in the tuple is similar to how it is done when using Lists. Similarly, we can slice tuples to get a subset of elements. Let us see some examples following our previous declarations of tuples:\n\n\\begin{lstlisting}[language=Python]\n# Accessing the third element of mixed_tuple\nthird_element = mixed_tuple[2]\nprint(\"Third element:\", third_element)\n\n# Slicing number_tuple to get the second and third elements\nsliced_tuple = number_tuple[1:3]\nprint(\"Sliced tuple:\", sliced_tuple)\n\\end{lstlisting}\n\nThis example shows how to access an element using the brackets with a number indicating the index to read from, as shown in the 'third\\_element' example. Similarly for slicing, we use the brackets with numbers (indices) separated by columns (:), as shown in the 'sliced\\_tuple' example.\n\nTry to modify any elements in a tuple raises the following error: \\textit{TypeError: 'tuple' object does not support item assignment}. Below is an example:\n\n\\begin{lstlisting}[language=Python]\n# Modify an element from a tuple\nnumber_tuple = (1, 2, 3, 4, 5)\nnumber_tuple[0] = 100\n\n# TypeError: 'tuple' object does not support item assignment\n\\end{lstlisting}\n\n\\subsubsection{Set:} An unordered collection of unique elements. In other terms, in this data structure, the order of items is not preserved where no duplicates exist. Sets are excellent for tasks that involve membership testing or eliminating duplicates. They provide fast access to elements, making them ideal for handling large datasets. \n\nSets are created using curly braces {\\textit{}} or by using \\textit{set()}. They contain unique elements and can store elements of different data types. Let us see some examples to creating sets.\n\\begin{lstlisting}[language=Python]\n# Creating an empty set\nempty_set = set()\n\n# Creating a set with numbers\nnumber_set = {1, 2, 3, 4, 5}\n\n# Creating a set with mixed data types\nmixed_set = {10, \"Hello\", 3.14, True}\n\\end{lstlisting}\nIn the 'empty\\_set', we use \\textit{set()} or \\textit{'{}'} to create an empty set. Creating a set with numbers is shown in the 'number\\_set' example. Furthermore, in 'mixed\\_set' we create a set containing numbers or strings. Note that we cannot create a list inside a set. \n\nReading elements from a set is possible using a loop as shown in the below example:\n\\begin{lstlisting}[language=Python]\n# Creating a simple set\nsimple_set = {1, 2, 3, 4, 5}\n\n# Looping through the set and printing each element\nfor element in simple_set:\n    print(\"Element:\", element)\n\\end{lstlisting}\n\nIn this code, we create a set called simple\\_set containing integers. We then use a for loop to iterate through the set, and in each iteration, we print the current element. This will produce the following output:\n\\begin{lstlisting}[language=Python]\nElement: 1\nElement: 2\nElement: 3\nElement: 4\nElement: 5\n\\end{lstlisting}\n\n\\subsection{Dictionary}: A key-value mapping that facilitates fast retrieval of values based on their unique keys. Dictionaries are your go-to for creating associations between pieces of information, and they excel at tasks like building frequency counters or modeling real-world relationships. In the following lesson, we will delve deeper into the use of dictionaries in Python.\n\n% \\subsection{Usage of List}\n% [Page content]\n\n% \\subsection{Usage of Tuple}\n% [Page content]\n\n% \\subsection{Usage of Set}\n% [Page content]\n\n% \\subsection{2 Dimensional Lists}\n% [Page content]\n\n\\subsection{Dictionary In Python}\nIn this lesson, we will explore the concept of dictionaries. Dictionaries are a tool for managing and arranging information. By merging your understanding of lists from the last week with dictionaries, we will discover how to establish a structure for representing a tic-tac-toe board using data.\n\nSimilar to a list, tuple, or set, a dictionary is a gathering of various values. However, unlike lists and tuples where indexes are integers, dictionaries' indexes are known as keys. Each key, along with its corresponding value, forms a key-value pair. When coding, dictionaries are denoted using curly braces, \\{\\}. Below is an example on how to create a dictionary.\n\n\\begin{lstlisting}[language=Python]\n    student_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\\end{lstlisting}\n\nIn this example, we can see that the 'student\\_info' contains three different keys: 'name', 'age', and 'major'. Each of these keys has a value. For instance, we can tell that the name of the student is 'Alice'.\n\n\\subsection{Dictionaries vs. Lists}\nDictionaries and lists are both used to store collections of data, but they have distinct characteristics that make them suitable for different situations.\n\n\\textbf{Lists:}\n\\begin{itemize}\n    \\item A list is an ordered collection of items, where each item can be of any data type (e.g., numbers, strings, other lists).\n    \\item Lists are accessed using indices (integer positions), with the first item at index 0, the second at index 1, and so on.\n    \\item Lists are used when we have a sequence of items that we want to maintain in a specific order.\n    \\item Example:\n    \\begin{lstlisting}[language=Python]\n    fruits = ['apple', 'banana', 'orange']\n    second_fruit = fruits[1]  # Access the second item (banana)\n    \\end{lstlisting}\n\\end{itemize}\n\n\\textbf{Dictionaries:}\n\\begin{itemize}\n    \\item A dictionary is an unordered collection of key-value pairs, where each key is unique and maps to a corresponding value.\n    \\item Dictionaries use keys to access their values, providing a more meaningful and efficient way to store and retrieve data.\n    \\item Dictionaries are ideal when we want to associate information based on a specific key.\n    \\item Example:\n    \\begin{lstlisting}[language=Python]\n    student_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n    student_name = student_info['name']  # Access the value using the key 'name'\n    \\end{lstlisting}\n\\end{itemize}\n\nBy understanding the differences between lists and dictionaries, we can choose the appropriate data structure for our specific needs.\n\n\\subsection{The keys(), values(), and items() Methods}\nIn Python, dictionaries come with three useful methods that allow us to extract different aspects of the dictionary's content:\n\\begin{itemize}\n    \\item \\textbf{keys()}: This method returns a list of all the keys present in the dictionary.\n    \\item \\textbf{values()}: This method returns a list of all the values associated with the keys in the dictionary.\n    \\item \\textbf{items()}: This method returns a list of tuples, where each tuple contains a key-value pair from the dictionary.\n\\end{itemize}\n\\begin{lstlisting}[language=Python]\nstudent_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\nkeys_list = student_info.keys()\nvalues_list = student_info.values()\nitems_list = student_info.items()\n\nprint(keys_list)   # ['name', 'age', 'major']\nprint(values_list) # ['Alice', 25, 'Computer Science']\nprint(items_list)  # [('name', 'Alice'), ('age', 25), ('major', 'Computer Science')]\n\\end{lstlisting}\n\nThese methods can help us access and analyze the keys and values within a dictionary more effectively.\n\n\\subsection{Checking Whether a Key or Value Exists in a Dictionary}\n\nBefore accessing values from a dictionary, it's essential to check if the key or value we're looking for actually exists to avoid errors.\n\nThe \\textbf{in} keyword can be used to check if a key exists in a dictionary:\n\n\\begin{lstlisting}[language=Python]\nstudent_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\nif 'name' in student_info:\n    print(\"Name exists in student_info\")\n\\end{lstlisting}\nOutput:\n\\begin{lstlisting}[language=Python]\nName exists in student_info\n\\end{lstlisting}\n\nWe can also use the \\textbf{not in} syntax to check if a key is not present in the dictionary:\n\n\\begin{lstlisting}[language=Python]\nif 'Gender' not in student_info:\n    print(\"Gender does not exist in student_info\")\n\\end{lstlisting}\n\nOutput:\n\n\\begin{lstlisting}[language=Python]\nGender does not exist in student_info\n\\end{lstlisting}\nIn this case, the 'not in' syntax returns true indicating that the key is not present in this dictionary.\n\nTo check if a value exists in the dictionary, we can use the \\textbf{in} keyword along with the \\textbf{values()} method:\n\n\\begin{lstlisting}[language=Python]\nif 25 in student_info.values():\n    print(\"25 is present as a value\")\n\\end{lstlisting}\n\nOutput:\n\n\\begin{lstlisting}[language=Python]\n25 is present as a value\n\\end{lstlisting}\n\n\\subsection{The get() Method}\nWhen working with dictionaries, it's common to encounter situations where a key might not exist. If we want to read the value from a key, we can use:\n\\begin{lstlisting}[language=Python]\nstudent_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\ngender = student_info['gender']\nprint(gender)\n\\end{lstlisting}\nThis piece of code will raise: \\textit{KeyError: 'gender'} because the key 'gender' does not exist in the dictonary. To avoid this error (instead of checking if the key exists using 'in'), we can use the \\textbf{get()} method.\n\nThe \\textbf{get()} method offers a safe way to retrieve values without causing errors:\n\\begin{lstlisting}[language=Python]\nstudent_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\nname = student_info.get('name', 'Unknown')\ngender = student_info.get('gender', 'Not specified')\n\nprint(name)    # 'Alice'\nprint(gender)  # 'Not specified'\n\\end{lstlisting}\nThe \\textbf{get()} method returns the value associated with the key if it exists, and if not, it returns a specified default value.\n\n\\subsection{The setdefault() Method}\nThe \\textbf{setdefault()} method allows us to insert a key-value pair into a dictionary if the key does not already exist. Let us see an example:\n\\begin{lstlisting}[language=Python]\nstudent_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\ngrade = student_info.setdefault('grade', 'A')\nprint(student_info)  # {'name': 'Alice', 'age': 25, 'major': 'Computer Science', 'grade': 'A'}\n\nmajor = student_info.setdefault('major', 'Engineering')\nprint(student_info)  # No change, 'major' key already exists\n\\end{lstlisting}\n\nThis method is useful when we want to add data to a dictionary without overwriting existing values.\n\n% \\subsection{Pretty Printing}\n% When dealing with complex dictionaries, it can be challenging to read their content in their raw form. The \\textbf{json} module provides a helpful way to format dictionaries in a human-readable manner:\n% \\begin{lstlisting}[language=Python]\n% import json\n\n% student_info = {'name': 'Alice', 'age': 25, 'major': 'Computer Science'}\n\n% pretty_info = json.dumps(student_info, indent=4)\n% print(pretty_info)\n% \\end{lstlisting}\n\n% The indent parameter specifies the number of spaces to use for indentation, resulting in a visually appealing output.\n\n\\subsection{Using Data Structures to Model Real-World Things}\nDictionaries are versatile tools for modeling real-world objects and relationships. Let's consider a product catalog:\n\\begin{lstlisting}[language=Python]\nproduct = {\n    'name': 'Smartphone',\n    'price': 499.99,\n    'features': ['camera', 'GPS', '4G'],\n    'reviews': {'user1': 4.5, 'user2': 3.8}\n}\n\nprint(product['name'])                # 'Smartphone'\nprint(product['features'][0])         # 'camera'\nprint(product['reviews']['user1'])    # 4.5\n\\end{lstlisting}\nIn this example, the dictionary organizes various aspects of a product.\n\n\\subsection{A Tic-Tac-Toe Board}\nLet's explore how a dictionary can represent a tic-tac-toe board. The keys will correspond to the positions on the board, and the values will represent the current state (X, O, or empty):\n\\begin{lstlisting}[language=Python]\ntic_tac_toe = {\n    'A1': 'X', 'A2': '', 'A3': 'O',\n    'B1': '', 'B2': 'X', 'B3': '',\n    'C1': 'O', 'C2': '', 'C3': 'X'\n}\n\nprint(tic_tac_toe['A1'], tic_tac_toe['A2'], tic_tac_toe['A3'])  # 'X O'\n# Print more rows here...\n\\end{lstlisting}\nThis dictionary structure mimics the layout of a tic-tac-toe board. In this example, the keys in the dictionary refers to the position in the board. Fpr instance,  'B3' refers to the second row and third column on the board, which is empty. Hence, in the print statement, $tic_tac_toe['A1']$ is 'X', $tic_tac_toe['A2]$ is '', and $tic_tac_toe['A3']$ is 'O'.\n\n\\subsection{Nested Dictionaries and Lists}\nDictionaries can contain other dictionaries or lists, creating hierarchical data structures. In the example below, we show how to access items from a dictionary or a list nested into another dictionary.\n\\begin{lstlisting}[language=Python]\nemployee_data = {\n    'Alice': {'age': 30, 'position': 'Manager'},\n    'Bob': {'age': 25, 'position': 'Developer'}\n}\n\nprint(employee_data['Alice']['position'])  # 'Manager'\nprint(employee_data['Bob']['age'])         # 25\n\ncompany_info = {\n    'employees': ['Alice', 'Bob', 'Carol'],\n    'departments': {'HR': 2, 'Finance': 3, 'IT': 5}\n}\n\nprint(company_info['employees'][1])        # 'Bob'\nprint(company_info['departments']['IT'])   # 5\n\\end{lstlisting}\n\nThese nested structures allow us to represent more complex relationships and hierarchies.\n\n\\subsection{Summary}\nIn this lesson, we discussed various data structures in Python, including List, Tuple, Set, and Dictionary. We have also seen Dictionary in more details, including its structure (the key-value pairs). Moreover, different useful Dictionary methods were introduced in this lesson: Keys, Values, Items, get, and setDefault. We have also seen the nested dictionaries and lists. \n\n\\subsection{Practical Exercise: Dictionaries [60  mins]}\n\\subsubsection*{Your task}\nAs practical exercises for Dictionaries, we use the Heart Failure dataset to show its advantages through a series of tasks. We provide you with a notebook to fill in response to the programming tasks. The notebook already contains the code that reads every row in the dataset as a dictionary, where the columns/features for that row are the keys in its dictionary. The programming tasks are as follows:\n\n\\begin{enumerate}\n    \\item Count the occurrences of chest pain type in the dataset. To achieve this, create a dictionary that keeps count of how many times each chest pain type appears in the dataset.\n    \\item Create a dictionary of patients with high cholesterol level. Store in this dictionary the full information about patients with high cholesterol (cholesterol level greater than 360). To do so, iterate through each data point, convert the 'Cholesterol' value to an integer, and check if it's greater than 200. If it is, we add the entire data point to the dictionary, using the patient's age as the key.\n    \\item Calculate Average Max Heart Rate for Male and Female Patients. Use two dictionaries to keep track of the sum of max heart rates and the count of patients for each gender. Iterate through the dataset, convert the 'MaxHR' value to an integer, and based on the patient's sex, update the respective dictionary. After processing all data points, we need to calculate the averages and print them.\n    \\item Find the Patient with the Highest Cholesterol. Iterate through the dataset and compare each patient's cholesterol level to the highest recorded so far. Store the entire data point for the patient with the highest cholesterol and finally print it.\n    \\item Group Patients by Age Range. Create a dictionary to group patients into different age ranges: '18-30', '31-40', '41-50', '51-60', '61+'. Iterate through the dataset and based on the patient's age, append the data point to the corresponding age group list within the dictionary. Finally, print the size of the list for each age group. \n    \\item Calculate the Percentage of Patients with Heart Disease. Iterate through the dataset and increment the count whenever we encounter a patient with heart disease ('HeartDisease' equal to '1'). Finally, calculate the percentage and print it.\n\\end{enumerate}\n\n\\subsubsection*{Model Answers}\nBelow are the answers for each of the tasks:\n\\begin{enumerate}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize an empty dictionary to store the counts of each chest pain type\nchest_pain_counts = {}\n\n# Loop through the dataset\nfor data_point in data:\n    chest_pain_type = data_point['ChestPainType']\n    if chest_pain_type in chest_pain_counts:\n        chest_pain_counts[chest_pain_type] += 1\n    else:\n        chest_pain_counts[chest_pain_type] = 1\n\nprint(chest_pain_counts)\n\\end{lstlisting}}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize an empty dictionary to store patients with high cholesterol\nhigh_cholesterol_patients = {}\n\n# Loop through the dataset\nfor data_point in data:\n    cholesterol = int(data_point['Cholesterol'])\n    if cholesterol > 360:\n        high_cholesterol_patients[data_point['Age']] = data_point\n\nprint(high_cholesterol_patients)\n\\end{lstlisting}}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize dictionaries to store sums and counts for max heart rates of male and female patients\nmale_max_hr = {'sum': 0, 'count': 0}\nfemale_max_hr = {'sum': 0, 'count': 0}\n\n# Loop through the dataset\nfor data_point in data:\n    max_hr = int(data_point['MaxHR'])\n    if data_point['Sex'] == 'M':\n        male_max_hr['sum'] += max_hr\n        male_max_hr['count'] += 1\n    else:\n        female_max_hr['sum'] += max_hr\n        female_max_hr['count'] += 1\n\n# Calculate average max heart rates\naverage_male_max_hr = male_max_hr['sum'] / male_max_hr['count']\naverage_female_max_hr = female_max_hr['sum'] / female_max_hr['count']\n\nprint(\"Average Max Heart Rate (Male):\", average_male_max_hr)\nprint(\"Average Max Heart Rate (Female):\", average_female_max_hr)\n\\end{lstlisting}}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize variables to keep track of the highest cholesterol and the corresponding patient\nhighest_cholesterol = 0\npatient_with_highest_cholesterol = None\n\n# Loop through the dataset\nfor data_point in data:\n    cholesterol = int(data_point['Cholesterol'])\n    if cholesterol > highest_cholesterol:\n        highest_cholesterol = cholesterol\n        patient_with_highest_cholesterol = data_point\n\nprint(\"Patient with the Highest Cholesterol:\", patient_with_highest_cholesterol)\n\\end{lstlisting}}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize a dictionary to group patients by age range\nage_groups = {'18-30': [], '31-40': [], '41-50': [], '51-60': [], '61+': []}\n\n# Loop through the dataset\nfor data_point in data:\n    age = int(data_point['Age'])\n    if age <= 30:\n        age_groups['18-30'].append(data_point)\n    elif age <= 40:\n        age_groups['31-40'].append(data_point)\n    elif age <= 50:\n        age_groups['41-50'].append(data_point)\n    elif age <= 60:\n        age_groups['51-60'].append(data_point)\n    else:\n        age_groups['61+'].append(data_point)\n\nprint(\"Patients in Age Group 18-30:\", len(age_groups['18-30']))\nprint(\"Patients in Age Group 31-40:\", len(age_groups['31-40']))\n# Repeat for other age groups...\n\\end{lstlisting}}\n\\item {\\begin{lstlisting}[language=Python]\n# Initialize variables to keep track of the total number of patients and patients with heart disease\ntotal_patients = len(data)\nheart_disease_patients = 0\n\n# Loop through the dataset\nfor data_point in data:\n    if data_point['HeartDisease'] == '1':\n        heart_disease_patients += 1\n\npercentage_with_heart_disease = (heart_disease_patients / total_patients) * 100\n\nprint(\"Percentage of Patients with Heart Disease:\", percentage_with_heart_disease, \"%\")\n\\end{lstlisting}}\n\\end{enumerate}\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}