{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 1: Data Visualization [180 mins]}\n\\subsection{Introduction}\nData visualization plays a crucial role in every step of the data science pipeline, enhancing our understanding of the data. In the early stages, when exploring and cleaning data, visualizations help in identifying patterns, outliers, and trends that might not be evident from raw numbers alone. Mainly, this step involves creating graphical representations of the intended data. Such a technique can provide data insights. In this lesson, we will explore the common libraries for visualizing the data. We will create simple and basic plots using these libraries. Afterward, we will explore the options for how to customize the plots and present them with style.\n\n\n\n\\subsection{Introduction to Data Visualization Libraries}\nIn Python, there are various libraries for making plots, like Matplotlib and Seaborn. These libraries have different tools to create clear, customized, and attractive graphs, making it easy to present data effectively.\n\\subsubsection{Matplotlib Library}\nAccording to their original reference, Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. This library is basically the most common tool for visualizing data in Python. \nThe main functionalities of such a library are numerous, some of which are:\n\\begin{itemize}\n    \\item Creating publication quality plots used in many Tier 1 Journals.\n    \\item Making interactive figures.\n    \\item Customizing visual style and layout.\n    \\item Exporting to many file formats.\n\\end{itemize}\n\\subsubsection{Seaborn Library}\nSeaborn is a data visualization library built on top of Matplotlib. It is designed to make it easier to create aesthetically pleasing and informative statistical graphics. Some of the key features and functionalities of Seaborn include:\n\\begin{itemize}\n    \\item Providing a high-level interface for drawing attractive and informative statistical graphics.\n    \\item Simplifying the creation of complex visualizations like heatmaps and pair plots.\n    \\item Offering built-in themes and color palettes to enhance the visual appeal of plots.\n    \\item Supporting easy customization of plot aesthetics.\n\\end{itemize}\n\\subsubsection{Comparison}\n\\begin{table}[h]\n\\centering\n\\caption{Comparison of Matplotlib and Seaborn}\n\\begin{tabular}{|p{4cm}|p{6cm}|p{6cm}|}\n\\hline\n\\textbf{Aspect} & \\textbf{Matplotlib} & \\textbf{Seaborn} \\\\\n\\hline\nDesign Philosophy & Comprehensive library with a low-level interface & Built for high-level, aesthetic graphics \\\\\n\\hline\nDefault Aesthetics & Basic aesthetics; often requires customization & Built-in themes and palettes for aesthetics \\\\\n\\hline\nSupported Plot Types & Versatile, supports various plot types & Specializes in statistical and complex plots \\\\\n\\hline\nCustomization & Customization possible for labels, titles, axes, etc. & Customization with a focus on aesthetics \\\\\n\\hline\n\\end{tabular}\n\\end{table}\n\n\\subsubsection{Installation}\nTo create plots, we need to make sure a couple of things are in place:\n\\begin{itemize}\n    \\item \\textbf{Data}: We need the data we want to visualize. This data can be in various forms, such as lists, arrays, or Pandas DataFrames.\n    \\item \\textbf{Library Installation}: We need to have the data visualization library installed.\n\\end{itemize}\n\n\\textbf{To install Matplotlib}, open the cmd (windows) or terminal (mac) and write the following code:\n\\begin{lstlisting}\npip install matplotlib\n\\end{lstlisting}\nThe result should appear something like this if the library is successfully installed:\n\n\\includegraphics[width=\\textwidth]{Images/uninstalled_matplotlib.png}\nIf the library was already installed, you will get something like this:\n\n\\includegraphics[width=\\textwidth]{Images/installed_matplotlib.png}\n\n\n\\textbf{To install Seaborn}, we do the same process but we write in the cmd/terminal the following code:\n\\begin{lstlisting}\npip install seaborn\n\\end{lstlisting}\n\n\n\n\\subsection{Matplotlib: Creating Basic Plot}\nSeveral types of plots exist that can be used to visualize data. In this section we will focus on the basic plot. We will use matplotlib to help unravel the structure of visualizing the data.\n\\begin{lstlisting}[language=Python]\n# Importing the needed library\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\n# Create a line plot\nplt.plot(x, y)\n\n# Display the plot\nplt.show()\n\\end{lstlisting}\nThe above code will create two lists, i.e. x and y. We create the line plot by calling \\textit{plt.plot(x, y)}. plt is a reference to the \\textit{matplotlib.pyplot} as indicated in the first line of the code. Afterward, we show the plot by calling \\textit{plt.show()}. The result for such a code should be something similar to the image below after we try it on Jupyter Notebook!\n\n\\begin{figure}[h!]\n  \\centering\n\\includegraphics[width=\\textwidth]{Images/simple plot.png}\n\\end{figure}\n\n\nNotice the blue line plotted inside the graph; this is our plotted line.\n\nLet us take another example of how we can represent more meaningful data. For example, assuming we have certain data about yearly sales for a company. How can we use the plot to represent them?\nBelow is a code that could walk us through it.\n\n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Months\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Monthly sales data\nsales = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n# Create a line plot\nplt.plot(months, sales)\n\n# Display the plot\nplt.show()\n\\end{lstlisting}\n\nIf we run the above code in Python, we will obtain the following figure:\n\\begin{figure}[h!]\n    \\centering\n    \\includegraphics[width=0.8\\linewidth]{Images/monthly_sales_basic.png}\n\\end{figure}\n\nAlthough it does the job, this plot lacks style. Before putting it on your fridge make sure to check the following lesson to see how we can customize it!\n\n\\subsection{Matplotlib: Customizing Plots With Labels, Titles, Colors, and Styles}\nCustomizing plots with labels, titles, colors, and other styles is a must to make the plot more representative.\nLet us assume that this is our final target:\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.8\\linewidth]{Images/styled.png}\n\\end{figure}\nThere are multiple added components to this figure:\n\\begin{itemize}\n    \\item Labels: There are labels for the x-axis, \\textit{Month}, and the y-axis, \\textit{Sales (in USD)}. In addition to a title on top of the figure, \\textit{Monthly Sales in 2023}.\n    \\item Grid: we can notice a grid in the background of the figure in gray, which enhances the readability of the plot.\n    \\item Marker: we see that a small circle exists for each month indicating the value clearly.\n    \\item Linestyle: the plot is also presented differently here. It is a dashed line instead of a solid one.\n    \\item Label rotation: the x-axis has rotated items.\n\\end{itemize}\nAll of these customizations can append on the previous code to become the following:\n\n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Months\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Monthly sales data\nsales = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n# Create a line plot\nplt.plot(months, sales, marker='o', linestyle='--')\n\n# Add labels and a title\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2023')\n\n# Customize the appearance\nplt.grid(True)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n# Display the plot\nplt.show()\n\\end{lstlisting}\n\n\\subsection{Matplotlib: Multiple Plot}\nIt is a common thing to plot graphs that can compare two sets of data. This exists in almost every paper! Let us explore an example where we want to compare the sales of 2022 with the ones of 2023.\nWe want to obtain something like the following:\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.8\\linewidth]{Images/multiplot.png}\n\\end{figure}\n\nBasically, what changed is that we have now two lists of sales. We added them both to the same plot. Below is the code which you can try on the notebook and modify to explore other options! Try adding 2021 sales and plot it with the others!\n\n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Months\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Sales data for two years\nsales_2022 = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\nsales_2023 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n# Plot for 2022\nplt.plot(months, sales_2022, marker='o', linestyle='-', label='2022', color='blue')\n\n# Plot for 2023\nplt.plot(months, sales_2023, marker='o', linestyle='-', label='2023', color='green')\n\n# Add labels, title, and legend\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2022 and 2023')\nplt.legend()\n\n# Display the plot\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n\\subsection{Matplotlib: Plot Types}\nThere exist many types of plots other than the line plot. We will explore them here with examples. Remember that it is never the case where programmers memorize every piece of code. It is sufficient if you can just understand them and be able to execute them.\n\\begin{itemize}\n    \n    \\item \\textbf{Line Plot} are used to visualize data points connected by lines. They are effective for showing trends and changes in data over a continuous variable, such as time.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n# Plot using plt.plot()\nplt.figure(figsize=(10, 5)) #used for resizing the figure\nplt.plot(x, y, marker='o', linestyle='-', label='2022', color='blue')\nplt.plot(x, y2, marker='o', linestyle='-', label='2023', color='green')\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2022 and 2023 (Line Plot)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n    \n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/1.png}\n    \\end{figure}\n    \n    \\item \\textbf{Scatter plots} are used to display individual data points as dots on a two-dimensional plane. They are useful for visualizing relationships and correlations between two variables.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n\n# Scatter plot using plt.scatter()\nplt.figure(figsize=(10, 5))\nplt.scatter(x, y, label='2022', color='blue')\nplt.scatter(x, y2, label='2023', color='green')\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2022 and 2023 (Scatter Plot)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/2.png}\n    \\end{figure}\n    \n    \\item \\textbf{Bar plots} display data as rectangular bars, making them suitable for comparing data across categories or discrete values. They are excellent for visualizing categorical data.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n# Bar plot using plt.bar()\nplt.figure(figsize=(10, 5))\nplt.bar(x, y, label='2022', color='blue', width=0.4)\nplt.bar(x + 0.4, y2, label='2023', color='green', width=0.4)\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2022 and 2023 (Bar Plot)')\nplt.xticks(x + 0.2, x)\nplt.legend()\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n\n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/3.png}\n    \\end{figure}\n    \n    \\item \\textbf{Stem plots} (also known as step plots) show data as a sequence of lines or steps, which can be used to emphasize the order and sequence of data points. They are often used for visualizing discrete data with few data points.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n\n# Stem plot using plt.stem()\nplt.figure(figsize=(10, 5))\nplt.stem(x, y, markerfmt='bo', linefmt='b-')\nplt.stem(x, y2, markerfmt='go', linefmt='g-')\nplt.xlabel('Month')\nplt.ylabel('Sales (in USD)')\nplt.title('Monthly Sales in 2022 and 2023 (Stem Plot)')\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/4.png}\n    \\end{figure}\n    \n    \\item \\textbf{Fill between plots} highlight the area between two datasets, making them useful for visualizing differences or fluctuations between two related variables.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n\n\n# Fill between two lines using plt.fill_between()\nplt.figure(figsize=(10, 5))\nplt.fill_between(x, y, y2, color='lightgray', label='2022-2023 Difference')\nplt.xlabel('Month')\nplt.ylabel('Sales Difference (in USD)')\nplt.title('Monthly Sales Difference Between 2022 and 2023')\nplt.legend()\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/5.png}\n    \\end{figure}\n    \n    \\item \\textbf{Stackplots} display multiple datasets stacked on top of each other, showing the cumulative data over time. They are effective for illustrating how different components contribute to a whole.\n    Example: \n\\begin{lstlisting}[language=Python]\nimport matplotlib.pyplot as plt\n\n# Sample data (same as previous examples)\nx = np.arange(1, 13)\ny = [3200, 3900, 4600, 5500, 6800, 8100, 8700, 8200, 7500, 6100, 4900, 3800]\ny2 = [3500, 4200, 5000, 6000, 7500, 8800, 9200, 8700, 7800, 6500, 5200, 4100]\n\n\n# Stack plot using plt.stackplot()\nplt.figure(figsize=(10, 5))\nplt.stackplot(x, [y, y2], labels=['2022', '2023'], colors=['blue', 'green'])\nplt.xlabel('Month')\nplt.ylabel('Total Sales (in USD)')\nplt.title('Monthly Sales Stacked Plot for 2022 and 2023')\nplt.legend()\nplt.grid(True)\nplt.show()\n\\end{lstlisting}\n\n    \\begin{figure}[h!]\n        \\centering\n        \\includegraphics[width=0.5\\linewidth]{Images/6.png}\n    \\end{figure}\n\n\n\n\\end{itemize}\n\n\n\n\\subsection{Matplotlib: HeartDisease Use Case}\nLet us map some of what we learned to an actual dataset: The heart disease dataset we experimented on before. For a better learning experience. It is recommended to try these plots together on Notebook. \n\\subsubsection{Distribution of Age}\nBefore we begin, let us read the dataset. Make sure to copy the dataset file to the same folder, or at least refer to it correctly when you are reading the dataset.\n\n\\begin{lstlisting}[language=Python]\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata = pd.read_csv('.\\heart.csv')\n\\end{lstlisting}\n\nTo show the distribution of age in the dataset, we can simply use a histogram plot. \n\n\\begin{lstlisting}[language=Python]\nplt.figure()\nplt.hist(data['Age'], color='blue')\nplt.title('Distribution of Age')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.show()\n\\end{lstlisting}\n\\begin{enumerate}\n    \\item The code creates a histogram of the 'Age' column, which visualizes the distribution of ages in the dataset. Matplotlib has a default setting to plot the frequency of occurrences when creating a histogram unless otherwise specified. Therefore, no need to specify the y-axis in this plot.\n    \\item We customize the plot by changing the title, labels, and color.\n    \\item Finally, we use plt.show() to display the histogram plot.\n\\end{enumerate}\n\nThe result will look something like the following:\n\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.66\\linewidth]{Images/heart_hist1.png}\n\\end{figure}\n\n\n\n\\subsubsection{Distribution of Gender}\nOn another cell, let us try to show the distribution of genders in the dataset. Note that there are a lot of ways to plot things and you don't have to stick with the way we provide you.\n\n\\begin{lstlisting}[language=Python]\nplt.figure()\ndata['Sex'].value_counts().plot(kind='bar', color='lightcoral')\nplt.title('Distribution of Gender')\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.show()\n\\end{lstlisting}\n\nIn this example, we applied the plot function directly to the value\\_counts. We used a bar plot to do it.\nThe result will look something like the following:\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.5\\linewidth]{Images/heart_plot2.png}\n\\end{figure}\n\\subsubsection{Heart Disease Count by Age and Gender}\nA more complicated plot would be: showing the differences between males and females who have heart disease.\nOne particular solution can be the following:\n\n\\begin{lstlisting}[language=Python]\n# Filter the data for males and females\nmales = data[data['Sex'] == 'M']\nfemales = data[data['Sex'] == 'F']\nmales_grouped = males.groupby('Age')['HeartDisease'].sum()\nfemales_grouped = females.groupby('Age')['HeartDisease'].sum()\n\n# Plot the data\nplt.bar(males_grouped.index, males_grouped, width=0.4, label='Male', color='b')\nplt.bar(females_grouped.index, females_grouped, width=0.4, label='Female', color='r', alpha=0.7)\nplt.title('Heart Disease Count by Age and Gender')\nplt.xlabel('Age')\nplt.ylabel('Heart Disease Count')\nplt.legend()\nplt.grid(True)\n\\end{lstlisting}\nLet us split the above code into two sections.\nThe initial portion of this code (first 6 lines) involves separating the dataset into two distinct groups: one for males and another for females. This separation allows us to analyze each group independently. With each group now stored in its respective variable, we proceed to further organize the data by grouping it based on age. Subsequently, we calculate the number of heart disease cases within each age group. This is achieved by summing the values in the 'HeartDisease' column, where each case of heart disease corresponds to a '1' in the data, while the absence of heart disease is represented as '0'. As a result, this summation provides us with the total count of heart disease cases within each age category.\nIn the second portion, we plot the two grouped data we have as bars. The first parameter provided to the plot is the indexes where we want to plot. The second variable is the actual data count. The third variable is the width of the bar. The fourth one is the label. The fifth one is the color. For the second plot, we utilized something an additional parameter alpha, which is the opacity of the bar plot since both plots will be overlapping at some points. \n\nThe result of the above code is the following:\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.5\\linewidth]{Images/heart_plot3.png}\n\\end{figure}\n\n\\subsection{Seaborn}\n\\subsubsection{Pair Plot}\nSeaborn facilitates a lot of tasks. Imagine we want to show an overall view of the dataset. Simply, we can use Pair Plot. According to Seaborn: \"By default, this function will create a grid of Axes such that each numeric variable in data will be shared across the y-axes across a single row and the x-axes across a single column. The diagonal plots are treated differently: a univariate distribution plot is drawn to show the marginal distribution of the data in each column.\" \n\nThe usage can be as follows:\n\n1- Import the libraries and read the data\n\\begin{lstlisting}[language=Python]\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata = pd.read_csv('.\\heart.csv')\n\\end{lstlisting}\n\n2- Pair Plot it. This task might take up to a few minutes, depending on the dataset and your device's performance.\n\\begin{lstlisting}[language=Python]\nsns.pairplot(data, hue='HeartDisease')\nplt.show()\n\\end{lstlisting}\n\nSuch a plot can tell a lot about the dataset. The parameters provided for this function are 1- Data (the imported dataset) and 2- Hue (Variable in data to map plot aspects to different colors).\nThe result will look like the following:\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=1\\linewidth]{Images/seaborn_3.png}\n\\end{figure}\n\n\nLet us take a specific case and elaborate a bit on it. Assume we want to address the first 10 lines of the dataset and we are only interested in the following columns: 'Age', 'Cholesterol', and 'HeartDisease'. What would the data distribution look like while considering the Heart Disease metric to split the data into classes? Let us execute the pair plot for these data:\n\n\\begin{lstlisting}[language=Python]\nimport seaborn as sns\nsubset_data = data[['Age', 'Cholesterol', 'HeartDisease']].head(10)\nsns.pairplot(subset_data, hue='HeartDisease')\nplt.show()\n\\end{lstlisting}\n\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.75\\linewidth]{pairplot_3.png}\n\\end{figure}\n\nWe will end up with 4 plots:\n\n\\begin{enumerate}\n    \\item Plot (1,1): This plot represents 'Age' on both the x and y-axes. Since 'Age' is a single variable, it displays a histogram showing the distribution of ages for each class of 'HeartDisease' (different colors).\n\n    \\item Plot (1,2): This plot represents 'Age' against 'Cholesterol'. It displays a scatterplot showing how 'Age' and 'Cholesterol' are related for each class of 'HeartDisease'.\n\n    \\item Plot (2,1): This plot represents 'Cholesterol' against 'Age'. It's the same as plot (1,2) but flipped, displaying a scatterplot showing how 'Cholesterol' and 'Age' are related for each class of 'HeartDisease'.\n\n    \\item Plot (2,2): This plot represents 'Cholesterol' on both the x and y-axes. Similar to the first plot, it shows a histogram of 'Cholesterol' values for each class of 'HeartDisease'.\n\n\\end{enumerate}\n\nNote that we cannot select a non-numerical column in this plot unless it was set as a hue. Try it yourself! Also, change the hue to another Column, such as \"Sex\" DataColumn or something else.\n\n\n\\subsubsection{Heatmap}\nLet us assume that we want to plot the correlation matrix heatmap. As we discovered in last week, a correlation matrix is a table showing correlation coefficients between variables. Each cell in the table represents the correlation between two variables. The value in the cell indicates both the strength and direction of the relationship between the variables. Matplotlib cannot provide an easy way to plot such a figure. Seaborn can come to the rescue with its simplicity in our case. The following figure is the result using Seaborn.\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.7\\linewidth]{Images/seaborn_2.png}\n\\end{figure}\nThe figure shows the correlation between all of these columns: 'Age', 'RestingBP', 'Cholesterol', 'MaxHR', and 'HeartDisease'. We see the value of the correlation between age and MaxHR for example in the 4th box of the first row. It says the correlation is -0.38. It is also colored in blue as an additional relation indicator (the warmer the color --> the closer the value is to 1. The colder the color --> the closer the value is to -1). Thus, it is clear that these two columns have a somehow inverse relation.\nLet us show the code first of how to handle such a case and then we discuss it:\n\n\\begin{lstlisting}[language=Python]\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Read the data\ndata = pd.read_csv('.\\heart.csv')\n\n# Take only specific data columns\nsubset_data = data[['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'HeartDisease']]\n\n# Compute the correlation matrix\ncorrelation_matrix = subset_data.corr()\n\n# Create a heatmap using Seaborn\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=.5)\n\n# Add title and show the plot\nplt.title('Correlation Matrix Heatmap')\nplt.show()\n\\end{lstlisting}\n\nAs previously mentioned, Seabron relies on Matplotlib to expand its functionalities. Thus, both libraries are needed in this case. After reading the dataset, we specify the columns we want to include in the correlation matrix. The variable \\textit{correlation\\_matrix} will store the correlation result. Then, we set up a heatmap using Seaborn. The important parameter is the first parameter provided: \\textit{sns.heatmap(correlation\\_matrix)}. We added other parameters to customize the map. Finally, we show it using \\textit{plt.show()}.\nTry to replicate the above code and play with the parameters of the heatmap. Remove some of the parameters and change some of them to see their effects.\n\n\\subsubsection{Other Plots}\nA lot of curves can be also plotted using Seaborn. Among which, we can discover Count Plot. It is used to visualize the frequency of unique categorical values in a dataset. Example:\n\\begin{lstlisting}[language=Python]\nsns.countplot(x='Sex', hue='HeartDisease', data=data)\nplt.title('Heart Disease Cases by Gender')\nplt.show()\n\\end{lstlisting}\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=0.5\\linewidth]{Images/seaborn_5.png}\n\\end{figure}\n\n\n% 2- Box Plot Example:\n\n% \\begin{lstlisting}[language=Python]\n% sns.boxplot(x='ChestPainType', y='Age', data=data)\n% plt.title('Age Distribution by Chest Pain Type')\n% plt.show()\n% \\end{lstlisting}\n% \\begin{figure}\n%     \\centering\n%     \\includegraphics[width=0.5\\linewidth]{Images/seaborn_6.png}\n% \\end{figure}\n\nThere are a lot of other plots. You can find other examples in the following source:\nhttps://seaborn.pydata.org/tutorial/introduction.html#a-high-level-api-for-statistical-graphics\n\nIt is worth mentioning that you don't have to know every plot type. You can always discover how to use them whenever you need them.\n\n\\subsection{Summary}\nIn this lesson on data visualization, we explored the fundamental concepts and practical applications of two prominent Python libraries, Matplotlib and Seaborn. Matplotlib, a versatile library for creating static, animated, and interactive visualizations, was introduced through the creation of various plots, customization techniques, and comparisons between datasets. Seaborn, built on Matplotlib, simplified the generation of aesthetically pleasing statistical graphics. Real-world examples, including the visualization of the Heart Disease dataset, showcased the libraries' capabilities, emphasizing the importance of selecting appropriate visualization methods based on data characteristics and analytical goals.\n\n\n\\subsection{Practical Exercise: Visualization}\nYour task involves creating a visual representation related to the Heart Disease dataset. You can use Seaborn or Matplotlib to generate a figure. Begin by loading the heart disease dataset into your Jupyter Notebook. Choose the type of plot you wish to create. Aim to illustrate intriguing insights from the data; for instance, display the average cholesterol per age group or the distribution of ChestPainType based on gender. You don't have to show more than one figure. And your plot can be very simple. After generating the plot, discuss its findings in your response, interpreting the information depicted.\nKeep in mind, the dataset contains various columns: 'Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS', 'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST\\_Slope', and 'HeartDisease'.\n\n\n\\subsection{Share and Compare: Visualization [60 mins]}\n\\subsubsection*{Task Overview}\n\n\\begin{itemize}\n\\item Share your code, plot, and interpretation here with us.\n\\item What parts of the activity did you find challenging?\n\\item Were there parts of the activity you still do not understand?\n\\item Engage with others in their responses as well.\n\\end{itemize}\n\nI'll kick things off with my response below.\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}