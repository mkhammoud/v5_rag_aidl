{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 2: Overview of the Python Language [60 mins]}\n\\subsection{Introduction}\n%This lesson highlights the importance of Python as a language and shows some of its important snippets while capturing the mindset of Python developers. \n%Our lesson begins by introducing Python as a language and elaborating on its features compared to other languages. We highlight its support for AI and how it can serve its purpose as one of the most useful languages for AI development.\n%We also present some Python code samples to show what a piece of a program looks like. The Print function is then discussed with the Comment tool.\n%One important aspect of developing a program is its lifecycle. The stages of the programs are discussed to show how they can be developed.\n%We capture the mindset of a programmer afterward to ease the process of programming for students by advancing insider tips.\n\nPython is a popular programming language that is widely used in many fields, including AI development. In this lesson, we highlight some of the key features that make Python stand out from other programming languages. We provide some Python code samples to help illustrate what a program looks like.\n\n\nFurthermore, we cover some basic programming concepts in this lesson. We discuss the print() function and how to use comments in your code. We also introduce the software development lifecycle and its stages to help students understand how programs are developed.\n\nFinally, we provide some tips from experienced programmers to help students get started with programming. These tips include advice on how to approach programming problems and how to stay motivated when learning to code.\n\n\\subsection{Python Programming Language}\n\n\\subsubsection{Programming Languages}\nA programming language is a set of instructions that tells a computer what to do. It is used to create software, applications, and websites. Google, Facebook, Outlook, and every other digital application are created using various programming languages. Programming languages are necessary because they allow us to automate tasks, create new technologies, and build more effective systems. \n\nComputers \u201cthink\u201d in binary, but programming languages allow us to translate our thoughts into instructions that computers can understand. Of course, writing computer code requires the understanding and use of a programming language.\n\n\\includegraphics[width=\\textwidth]{Images/lesson_2_code_to_binary.png}\n[enhance this image by adding that there is a person who is writing the code and the code being converted to the computer machine through binary translation].\n\n\nThere are many different programming languages available today, each with its own strengths and weaknesses. Some programming languages are designed for specific tasks, such as web development, gaming, data analysis, or general-purpose applications. Among all of these, Python stands out.\n\n\\subsubsection{Python}\nPython\\footnote{https://www.python.org/} is a high-level programming language that is widely used in many fields, including data science, machine learning, web development, and more. It is known for its simplicity, ease of use, and compatibility with the majority of platforms (Windows, Mac, Linux, etc...). It is designed to be easy to read and write, which makes it an ideal language for beginners who are just starting to learn programming. Python\u2019s syntax is designed in an expressive way that allows programmers to express their concepts in fewer lines of code. This has made Python one of the fastest-growing programming languages in recent years.\n \n\n\n\n\n\n\\subsection{Python vs Others}\nWe present a summarized table to compare the top 5 most utilized languages for programmers in the market. The languages are Python, Java, JavaScript, C++, and C\\#.\n\n\\begin{itemize}\n    \\item Java: A platform-independent language used for building enterprise applications, Android apps, and large-scale systems.\n\n\\item JavaScript: A language primarily used for web development to add interactivity and dynamic behavior to web pages.\n\n\\item C++: A powerful language used for system programming, game development, and embedded systems.\n\n\\item C\\#: A modern language developed by Microsoft, used for building Windows desktop apps, web apps, and backend services.\n\\end{itemize}\n\nWe can clearly see that Python is the only easy-to-lean language among the other languages. \nFurthermore, we notice that the main usage for Python is general applications and Machine Learning applications, meaning it can be utilized in many contexts while maintaining a powerful performance in most of them, especially in Machine Learning. \nIn addition, Python is considered to be an interpreted language instead of a compiled language. The main difference is that an interpreted language translates the code line-by-line when the program is running. A compiled language must translate code written in a high-level programming language into a lower-level language like binary language. It converts the code ahead of time before the program runs.\n\n\\begin{table}[h]\n\\centering\n\\begin{tabular}{|c|c|c|c|c|}\n\\hline\nLanguage & Popularity & Difficulty & Execution Mode & Primary Use\\\\\n\\hline\nPython & 1 & Easy & Interpreted & General-purpose, Machine learning\\\\\n\\hline\nJava & 3 & Moderate & Compiled & Android applications\\\\\n\\hline\nJavaScript & 2 & Moderate & Interpreted & Web development\\\\\n\\hline\nC++ & 4 & Moderate & Compiled & Game development \\\\\n\\hline\nC\\# & 5 & Moderate & Compiled & Windows applications\\\\\n\\hline\n\\end{tabular}\n\\caption{Summarized Comparison of Most Popular Programming Languages}\n\\label{tab:programming-languages}\n\\end{table}\n\n\n\n\n\n\n\n\n\n\n\n\\subsection{Python for AI}\nPython has taken a large lead to become the best programming language for AI. Several reasons qualify such a language for this crown which are distributed across the upcoming weeks of this course. Thus, we remain \\textbf{abstract} about these concepts until we explore them later in detail.\n\n\\begin{enumerate}\n    \\item \\textbf{Object-Oriented Programming (OOP) Support:} It is an OOP language, which allows for the organization of AI code into reusable components.\n    \\item \\textbf{Data Science and Visualization:} Python provides powerful tools for data manipulation, analysis, and visualization. Tools such as Pandas, Matplotlib, and Seaborn enable easy data processing, exploration, and visualization, which are essential for AI tasks like data preprocessing, model evaluation, and result interpretation.\n\\end{enumerate}\n\n\n\nPython is extensively used in various AI applications across different domains. Some of the actual Python use cases are the following:\n\\begin{itemize}\n    \\item \\textbf{Machine Learning.} Python is widely used for machine learning tasks. It powers the development of algorithms and models for tasks such as classification, regression, clustering, and recommendation systems.\n    \\item \\textbf{Natural Language Processing (NLP).} Python is the go-to language for NLP applications. NLP is a field of computer science and artificial intelligence that focuses on the interaction between computers and humans using natural language. It involves the computational analysis of human languages and aims to enable machines to comprehend and interpret data by mimicking human natural language.\n    \\item \\textbf{Computer Vision.} Python enables image and video processing, object detection, and other computer vision applications using supportive Python extensions (libraries).\n\\end{itemize}\n\n\n\n\n\\subsection{Self-evaluation Quiz: Python Knowledge [10 mins]}\nThis is a Self-evaluation knowledge quiz about Python. The objective is to ensure that the student knows why Python is being chosen as our main programming language for applied AI. \n\nQ1- Which Operating System is required to run Python?\n- Windows\n- Mac\n- Any *\n- Linux\nFeedback: Python is cross-platform, meaning it can run on many different platforms including Windows, Mac, and Linux.\n\nQ2- Among these programming languages, which is the easiest to learn?\n- Java\n- Python *\n- C\\#\n- C++\n- JavaScript\nFeedback: Python language is the easiest to use for both programmers and non-programmers. It uses a simple syntax that mimics natural language, making it easier to read and understand than other code\n\n\nQ3- Is Python an interpreted language or a compiled one?\n- Interpreted *\n- Compiled\n- Neither\nFeedback: Python is an interpreted, high-level programming language with dynamic semantics\n\nQ4- Python supports the following AI use cases:\n- Machine Learning\n- Natural Language Processing\n- Computer Vision\n- All of the Above *\nFeedback: Python is extensively used in various AI applications across different domains, including all of the previously mentioned applications.\n\nQ5- We speak English. Computers speak:\n- Japanese\n- Binary *\n- French and Russian\n- None of the above\nFeedback: We translate our language into instructions for the computers. Computers convert the instructions into binary as it only speaks 0's and 1's.\n\n\n\n\\subsection{Python Code Examples}\nHere, we provide some real code examples to show what we mean by instructions and code.\n\n\\subsubsection{Print}\nThe \\textbf{print} function is the most basic function that outputs what you want on the screen. For example, you can tell the computer to print \\textit{Hello World} using the \\textit{print} keyword, and this is exactly what it will do.\nThe correct way to tell a computer how to print it is by typing this line:\n\\begin{lstlisting}[language=Python]\nprint(\"Hello World\")\n\\end{lstlisting}\nWe will dig into more details about Functions and Outputs as we go on in this course. But for now, what we have to know is that we can use the keyword \\textit{print} followed by \\textit{Hello World} between \\textit{(\"} and \\textit{\")} to print Hello World.\nNote that we are not limited to \\textit{Hello World}, anything can be put inside \\textit{print} to be printed. For example:\n\\begin{lstlisting}[language=Python]\nprint(\"ABC\")\n\\end{lstlisting}\n\\begin{lstlisting}[language=Python]\nprint(\"123\")\n\\end{lstlisting}\n\\begin{lstlisting}[language=Python]\nprint(\"Hi I am an AI student\")\n\\end{lstlisting}\n\n\n\\subsubsection{Comments}\nComments are used to explain what the code is about. It is a very useful tool to actually help programmers remember what code they wrote, and why they wrote it. Also, it is very beneficial when working in teams and other people will have to read and use your code.\n\n\\textbf{Comments with Print:}\\newline\nHere is an example of a comment written inside a Python code:\n\\begin{lstlisting}[language=Python]\n#Hello, this is a comment\n\\end{lstlisting}\n\nWe see that the first character is a \\textit{\\#}. The \\# tells the computer that the rest of the line will be just a comment which can be ignored during Python execution. To elaborate, we rely on the following example:\n\n\\begin{lstlisting}[language=Python]\n#Hello, this is a comment\nprint(\"Hi\")\n\\end{lstlisting}\nThis piece of code, consisting of 2 lines, is a Python code. When we tell the computer to run (start) this code, it will look at the first line for execution, and then execute the second line afterward. Python will notice that the first line is a comment since we used the \\textit{\\#}, therefore, it will ignore it. Afterward, when it jumps to the second line, it will see that this line is a print, meaning that the computer will print what is inside of it.\nThe execution result of the code above will be this:\n\\begin{lstlisting}\nResult:\nHi\n\\end{lstlisting}\nAnother valid way for commenting is writing the comments after the print, or next to it. Like:\n\\begin{lstlisting}[language=Python]\nprint(\"Hi\") \n#Hello, this is a comment\n\\end{lstlisting}\n\\begin{lstlisting}[language=Python]\nprint(\"Hi\") #Hello, this is a comment\n\\end{lstlisting}\nAll of them have the same impact.\n\n\n\\textbf{Multiple Comments and Printing lines:}\\newline\nWhat if we want to execute more than 2 lines? Let us give the example first:\n\\begin{lstlisting}[language=Python]\n#Hello, this is a comment\nprint(\"Hi\")\nprint(\"Artificial Intelligence\")\n#Now we printed 2 lines, let us print more\nprint(\"Programming\")\n#print(\"Machine Learning\")\n\\end{lstlisting}\n\n\\begin{lstlisting}\nResult:\nHi\nArtificial Intelligence\nProgramming\n\\end{lstlisting}\n Notice how the execution sequence goes from top to bottom. Whenever a comment is seen, Python skips the line and jumps to the next one. The last line was a printing line. However, it was preceded by a \\textit{\\#}, therefore it was considered as a comment too.\n\n\\subsubsection{Python Use Case - Medical Application}\nProgramming in Python is definitely not just for printing and commenting. Here is an example of a Python code used for mimicking healthcare application (Don't worry, you do not need to know anything about this code for now!).\n\n\\begin{lstlisting}[language=Python]\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\npd.options.display.float_format = '{:.2f}'.format\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nclass MedicalDataset:\n\n    data = []\n\n    def __init__(self, dataset_path):\n        import csv\n        with open(dataset_path, mode='r') as csv_file:\n            # Create a CSV reader object\n            csv_reader = csv.DictReader(csv_file)\n            # Loop through each row in the CSV file\n            for row in csv_reader:\n                # Append each row (as a dictionary) to the data list\n                self.data.append(row)\n\n    def calculate_average_max_hr(self):\n        # Initialize dictionaries to store sums and counts for max heart rates of male and female patients\n        male_max_hr = {'sum': 0, 'count': 0}\n        female_max_hr = {'sum': 0, 'count': 0}\n        # Loop through the dataset\n        for data_point in self.data:\n            max_hr = int(data_point['MaxHR'])\n            if data_point['Sex'] == 'M':\n                male_max_hr['sum'] += max_hr\n                male_max_hr['count'] += 1\n            else:\n                female_max_hr['sum'] += max_hr\n                female_max_hr['count'] += 1\n        # Calculate average max heart rates\n        average_male_max_hr = male_max_hr['sum'] / male_max_hr['count']\n        average_female_max_hr = female_max_hr['sum'] / female_max_hr['count']\n        return average_male_max_hr, average_female_max_hr\n\n    def group_patients_by_age(self):\n        # Initialize a dictionary to group patients by age range\n        age_groups = {'18-30': [], '31-40': [], '41-50': [], '51-60': [], '61+': []}\n        # Loop through the dataset\n        for data_point in self.data:\n            age = int(data_point['Age'])\n            if age <= 30:\n                age_groups['18-30'].append(data_point)\n            elif age <= 40:\n                age_groups['31-40'].append(data_point)\n            elif age <= 50:\n                age_groups['41-50'].append(data_point)\n            elif age <= 60:\n                age_groups['51-60'].append(data_point)\n            else:\n                age_groups['61+'].append(data_point)\n        return age_groups\n\\end{lstlisting}\n\n\\subsection{Project Stages}\nIn order to develop a certain program, your project will have to go through stages. These stages can be listed as Planning, Development, Testing, and Deployment phases. Below we summarize each one of them independently.\n\n[insert diagram about these steps]\n\n\\textbf{The planning phase} is the initial stage of a software development project. During this phase, the requirements and goals of the project are defined, and a plan is created to guide the development process. Key activities in this phase include gathering user requirements, defining project scope, creating a project timeline, and identifying available resources.\n\n\\textbf{The development phase} is where the actual coding and implementation of the software takes place. Programmers write code based on the requirements specified in the planning phase. The development phase involves tasks such as designing the architecture of the software, coding individual components, integrating them, and creating the user interface. This phase is iterative and involves constant collaboration between developers and designers to ensure the software meets the intended objectives.\n\n\\textbf{The testing phase} focuses on identifying and fixing defects or issues in the software. Different types of testing are performed to evaluate the software's functionality, performance, security, and usability. These tests include unit testing (testing individual components), integration testing (testing how different components work together), system testing (testing the entire system as a whole), and acceptance testing (testing if the software meets user requirements). Testers execute test cases, report bugs, and work closely with developers to resolve any identified issues.\n\n\\textbf{The deployment phase} involves releasing the software for actual use by end-users. It includes activities such as preparing the software for installation, creating user documentation, and training end-users. Deployment can vary depending on the specific requirements, such as deploying the software on servers, app stores, or distributing it directly to users. This phase requires coordination between development teams, operations teams, and other stakeholders to ensure a smooth transition to the production environment.\n\n\n\n\\subsection{Self-evaluation Quiz: Programmer Mindset [10 mins]}\nQ1- I copied a code from the internet to my computer but I can't seem to understand it. What should I do?\n- Read the comments within the lines of the code\n- Carefully read the details where you copied it from\n- Break it down into code pieces\n- Debug and trace\n- Play with it and change some lines\n- All of the above *\nFeedback: It\u2019s not uncommon to copy code from the internet and paste it into your project. However, it\u2019s important to understand what the code does. A senior programmer would likely advise you to take the time to understand the code you copied. A programmer reacts in many ways to such an event. It's always good to check many sources. One particular solution that programmers do is playing with the code, for example, they might change one line to see how would the code react when that happens.\n\nQ2- I am writing a code that serves a certain purpose. What should I consider?\n- Documenting and commentating on the code *\n- Memorize the code\n- Encrypt the code so that no one can understand\n- Print the code and store it in my drawer\nFeedback: Definitely, documenting and commentating are needed since at random times, you might need to read the code again. The bigger the code is the more difficult it is to understand as you start engaging in multiple projects. Thus, it is a good habit to keep commentating on your code. Also, there is no need to memorize, encrypt, or print any of your code.\n\nQ3- I am facing a problem and I don't know how to solve it myself.\n- Google it\n- Ask for help\n- Read the error\n- All of the above *\nFeedback: There is definitely one or multiple solutions for whatever problem you are facing. What is important is to know how to identify the error and google it/ask someone to check how to resolve it.\n\nQ4- I want to improve my programming skills. I should\n- Read more code\n- Learn by doing, practicing, and not just reading *\n- Memorize code\nFeedback: Beginners in programming often make the mistake of just reading a book or looking at sample code without practicing it. While it\u2019s easy to read about programming lessons and get all the concepts in your head, actual programming doesn\u2019t work that way. You really need to get your hands dirty in coding and practice regularly. And remember, avoid memorizing code, every problem has a different approach to solving it, so it is very difficult to find one solution for two different problems.\n\nQ5- How to begin coding?\n- Code by hand *\n- Copy \\& paste the code\n- Ask my friend to write it for me\nFeedback: Coding by hand can give you a clear understanding of syntax and algorithms, you make a deeper connection in your brain. Learning programming this way will make your work easier and faster later. \n\n\n\n\n\n\n\n\\subsection{Summary}\nIn conclusion, this lesson has provided a comprehensive introduction to Python programming, highlighting its significance in the field of AI development. We have explored key features that set Python apart from other programming languages and have given examples of Python code to demonstrate its structure and syntax.\n\nThroughout the lesson, we have covered essential programming concepts, such as the print() function and the use of comments in code. By understanding these concepts, students have the essential knowledge for effectively communicating with the computer.\n\nAdditionally, we have introduced the software development life-cycle and outlined its stages in program development. Students can create more robust and efficient programs after being familiarized in this process.\n\nTo help students succeed in their programming journey, we have shared valuable tips from experienced programmers. These tips include practical advice on problem-solving strategies and maintaining motivation during the learning process.", "metadata": {"source": "./full-course/aai.txt"}}}