{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 1: Introduction to Loops}\n\\subsection{Introduction}\nThis lesson will serve as an intro for \\textit{for loop} and \\textit{while loop}. They are powerful tools that could help repeat tasks. Such tools would allow us to optimize the way we automate tasks. We can tell the computer to keep on executing a certain task 2 times, 10 times, or an infinite amount of time. Note that this lesson is only an introduction to loops. We will explore more usage for it in the upcoming lessons.\n\n\\subsection{For Loop}\n\\subsubsection{Motivation}\nLet us assume a scenario where we want to print \"Hello World\" 10 times. The hard way to do it is to simply use the print method 10 times like below:\n\\begin{lstlisting}[language=Python]\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n    print(\"Hello World\")\n\\end{lstlisting}\nHowever, there are other ways where we can be more efficient and automate certain tasks. For loops are used for this purpose. We will elaborate on such a concept in the upcoming sections. But just to give an example of how we can reduce the lines of code by far, we can check the below example:\n\\begin{lstlisting}[language=Python]\n    for index in range(10):\n        print(\"Hello World\")\n\\end{lstlisting}\nThese 2 lines are worth the 10 lines written before. Imagine if we want to print \"Hello World\" 100 times, how would that look like in the hard way? What about the smart way, how many lines this will take us?\n\n\\subsubsection{Basic For Loop}\nWe elaborated in the motivation part why the for loop is important. Now we will discuss how we can write one ourselves. Bringing back our previous example:\n\\begin{lstlisting}[language=Python]\n    for index in range(10):\n        print(\"Hello World\")\n\\end{lstlisting}\nLet us unpack the previous example, and discuss how we wrote the loop. Below is a summary of each component of this for loop;\n\\begin{itemize}\n    \\item for: is the key term that indicates what the temporary variable will be\n    \\item index: is the loop variable or the temporary variable. Note that it can be named like any other variable, it doesn't have to be necessarily named index.\n    \\item in: is the key term that indicates what the sequence will be\n    \\item range(10): is the sequence from 0 to 9\n    \\item 'two-points': determines the beginning of the loop\n    \\item print(\"Hello World\"): prints \"Hello World\". In our example, this is the only code to be executed repetitively since it has an indentation.\n\\end{itemize}\nThe terms \"for\" and \"in\" are preserved for the for loop the same way \"if\" is preserved for the if statement (from the previous week). range(10) is a sequence that indicates the following: 0,1,2,3,4,5,6,7,8,9. It is a collection of numbers. We tell the loop to automate the process 10 times. Note that if we want to automate the process 5 times, we would have written range(5). \\textit{index} is the iteration number of the loop. The method \\textit{print(\"Hello World\")} will output Hello World.\n\n\\textbf{Sequence of execution:}\n\\begin{enumerate}\n    \\item Python understands the range first. Once it sees that the range is 10, it prepares itself to loop 10 times\n    \\item Python gives \\textit{index} the first index, which is 0. At the beginning of the for loop, \\textit{index} starts by being assigned the first item in the sequence.\n    \\item Python executes what is inside the for loop once (i.e., the print method).\n    \\item Python removes the 0 from the sequence and changes the \\textit{index} from 0 to 1.\n    \\item Python executes what is inside the for loop (i.e., the print method) for the second time.\n    \\item Python removes the 1 from the sequence and changes the \\textit{index} from 1 to 2.\n    \\item Python executes what is inside the for loop (i.e., the print method) for the third time.\n    \\item Python removes the 2 from the sequence and changes the \\textit{index} from 2 to 3.\n    \\item ... (process keeps repeating until all numbers are removed from the sequence, we show below the last processes)\n    \\item Python removes the 8 from the sequence and changes the \\textit{index} from 8 to 9.\n    \\item Python executes what is inside the for loop (i.e., the print method) for the tenth time.\n    \\item Python removes the 9 from the sequence. Now the sequence is empty meaning that the for loop is over and the program will exit the for loop.\n\\end{enumerate}\nMake sure to try the example on your Jupyter while changing the number inside the range(...) method to see how the behavior changes.\n\nAnother example where we have more than one statement inside the for loop can be the following:\n\\begin{lstlisting}[language=Python]\n    for index in range(3):\n        print(\"Artificial\")\n        print(\"Intelligence\")\n\\end{lstlisting}\nWe can probably guess what would be the output of the above program. It is the words \"Artificial\" and \"Intelligence\" being printed successively 3 times. The output would look like the following:\n\\begin{lstlisting}\n    Artificial\n    Intelligence\n    Artificial\n    Intelligence\n    Artificial\n    Intelligence\n\\end{lstlisting}\n\n\\subsubsection{Loop Variable}\nThe loop variable (i.e., \\textit{index} in the previous example) can be used inside the for loop too. An example where we want to print a number from 0 to 9 can be the following:\n\\begin{lstlisting}[language=Python]\n    for index in range(10):\n        print(index)\n\\end{lstlisting}\n\nNote that we can also perform operations on the index variable too. For example, what if we want to print the numbers from 10 to 19? \n\\begin{lstlisting}[language=Python]\n    for index in range(10):\n        print(index + 10)\n\\end{lstlisting}\nThe above code will execute the following sequence:\n\\begin{enumerate}\n    \\item print(0 + 10) \\#output 10\n    \\item print(1 + 10) \\#output 11\n    \\item print(2 + 10) \\#output 12\n    \\item print(3 + 10) \\#output 13\n    \\item print(4 + 10) \\#output 14\n    \\item print(5 + 10) \\#output 15\n    \\item print(6 + 10) \\#output 16\n    \\item print(7 + 10) \\#output 17\n    \\item print(8 + 10) \\#output 18\n    \\item print(9 + 10) \\#output 19\n\\end{enumerate}\n\nNote that there is an alternative way of doing that. the \\textit{range} method can be customized to provide a sequence that does not start from 0. By specifying the starting number of the method range, we can have the desired sequence such as \\textit{range(10, 20)}. If we do not provide the starting number of the range method, the default will be 0. Hence, we can use the following example as an alternative to the previous example:\n\\begin{lstlisting}[language=Python]\n    for number in range(10, 20):\n        print(number)\n\\end{lstlisting}\nNotice how we changed the variable name from \\textit{index} to \\textit{number} in this example. It is just to remind us that we can name it almost anything like any other variable.\nMake sure to try all the examples in your editor!\n\n\n\\subsubsection{Range Input}\nThe range method can support to be interactive too by providing the ending number as a variable. For example:\n\\begin{lstlisting}[language=Python]\n    x = 10\n    for index in range(x):\n        print(\"AI\")\n\\end{lstlisting}\n\nA possible way to adjust your loop depending on the user input would be the following:\n\\begin{lstlisting}[language=Python]\n    x = int(input(\"enter the loop range\"))\n    for index in range(x):\n        print(\"AI\")\n\\end{lstlisting}\nNotice that we used the \\textit{int casting} feature to use the input as a number instead of a string.\n\n\n\\subsubsection{Interactive loop}\nThere are some applications where we want to constantly interact with the user. For example, we want to write a program where the user is asked 5 times to enter a text and the program should count the number of characters inside that text.\n\\begin{lstlisting}[language=Python]\n    for index in range(5):\n        text = input(\"enter text\")\n        length = len(text)\n        print(text, \"has a length of\", length)\n\\end{lstlisting}\n\nIn this example, the program will execute the code five times, as if the above program is equivalent to:\n\n\\begin{lstlisting}[language=Python]\n    #input 1\n    text = input(\"enter text\")\n    length = len(text)\n    print(text, \"has a length of\", length)\n\n    #input 2\n    text = input(\"enter text\")\n    length = len(text)\n    print(text, \"has a length of\", length)\n\n    #input 3\n    text = input(\"enter text\")\n    length = len(text)\n    print(text, \"has a length of\", length)\n    \n    #input 4\n    text = input(\"enter text\")\n    length = len(text)\n    print(text, \"has a length of\", length)\n    \n    #input 5\n    text = input(\"enter text\")\n    length = len(text)\n    print(text, \"has a length of\", length)\n\\end{lstlisting}\n\n\n\\subsubsection{Loops With Inner Conditions}\nAs previously indicated, the point of the concepts we are learning is that even though they all serve different purposes, they are built to be combined together to result in the desired output. If, For, and any other tool can be used together. For example, let us take the following example where we only want to accept a certain input if it has 8 characters, such as the minimum requirement for a password.\n\n\\begin{lstlisting}[language=Python]\n    for index in range(5):\n        text = input(\"enter your password\")\n        length = len(text)\n        if length < 8:\n            print(\"The password you chose is too short\")\n        else:\n            print(\"The password you chose is valid\")\n\\end{lstlisting}\n\nMake sure to try that out in your Jupyter Notebook.\n\n\\subsection{While Loop}\n\\subsubsection{Definition}\nAnother way of iterating processes is to utilize the \\textit{while} loop. It keeps on executing elements as long as a certain condition is met. Once the condition becomes false, the iteration stops and exits. Below is the skeleton for the while loop.\n\n\\begin{lstlisting}[language=Python]\nwhile condition:\n    # Code to be executed while the condition is true\n    # The loop continues as long as the condition remains true\n\\end{lstlisting}\nThe condition (boolean) is written next to 'while'. As long as this condition is true, the code inside the while loop will keep on executing. Whenever the condition is false, Python will exit the loop.\n\n\\subsubsection{Usage}\nAs long as the while condition is true, the while keeps on executing.\n\n\\begin{lstlisting}[language=Python]\ncounter = 0\nwhile counter < 100:\n    print(\"I'll stay inside the while for a while!\")\n    counter += 1\n\\end{lstlisting}\n\nThe basic condition above indicates that the lines of code will keep on executing 100 times. Notice how we are updating the condition in every iteration. The variable \\textit{counter} is incremented after every execution, otherwise, the stopping condition would never meet.\n\nImagine the condition below (don't try it - it might freeze your computer for a bit):\n\\begin{lstlisting}[language=Python]\nwhile True:\n    print(\"I'll stay inside the while until the end of time!\")\n\\end{lstlisting}\nBe careful when the condition is never met. The computer will keep on executing the lines non-stop.\nThis condition however has its own use cases. It is used for programs that we don't want to terminate.\nNote that there are some ways to force exit the loop - using break - which we will discuss in later lessons this week. \n\n\n\\subsubsection{Example}\nHere's an example of how we can use a while loop to repeatedly prompt a user for their password until they enter the correct password:\n\n\\begin{lstlisting}[language=Python]\ncorrect_password = \"secret123\"\ninput_password = input(\"Enter your password: \")\n\nwhile input_password != correct_password:\n    print(\"Incorrect password. Please try again.\")\n    input_password = input(\"Enter your password: \")\n\nprint(\"Password accepted. Welcome!\")\n\\end{lstlisting}\n\nIn this example, the loop condition input\\_password != correct\\_password checks if the input password matches the correct password. If they don't match, a message is printed indicating that the password is incorrect, and the user is prompted to input their password again using input(). The loop will continue until the correct password is entered.\n\n\\includegraphics[width=\\textwidth]{Images/video_resource.png}\nTitle: LAU AAI2 W3 L1 Loop Password.MP4.\n\n\n\\subsection{summary}\nIn this lesson, we introduced the fundamental concepts of for and while loops, showcasing their potential to streamline repetitive tasks. By leveraging the range sequence and harnessing loop variables, we can create more efficient and adaptable code structures. We will explore more advanced loops in later lessons.", "metadata": {"source": "./full-course/aai.txt"}}}