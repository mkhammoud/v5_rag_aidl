{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 4: Numbers [120 mins]}\n\\subsection{Introduction}\n\nIn this lesson, we learn about the numerical types that exist in Python. Remember, numbers are important because AI strongly relies on them for calculating decisions. \n\nFirstly, it's important to understand that Python supports various numerical types. However, for the purpose of this lesson, we will primarily focus on two commonly used types: integers and floats.\n\nNext, we will explore arithmetic expressions involving different types of numbers. Python allows us to perform calculations and operations on integers and floats, and even mix them in expressions. This flexibility is useful when working with AI algorithms that involve numerical calculations.\n\nAfterward, we explore how to check for the data type using the type method. \n\nLastly, we will discuss the concept of operator priority. When multiple operations are present in an expression, Python follows a specific order of evaluation. It is important to understand the priority of operators to ensure accurate calculations. We will explore this concept further to gain a better understanding of how Python evaluates arithmetic expressions.\n\n\n\n\\subsection{Integers}\nAn integer (also referred to as \\textit{int}) is a whole number that doesn't have a decimal place. You guessed it, it's like every other real number you encounter. 47, for example, is an integer, and many more others!\nInt, or integer, can be positive or negative, without decimals, of unlimited length. Meaning that 7896584515 and -1 are both still considered integers!\nCool, now what if we want to print a number? Well here's how to do it in the example below:\n\\begin{lstlisting}[language=Python]\n#Note that this is not the best way to print a number\nprint(\"100\")\n\\end{lstlisting}\nWe simply added 100 to the print function. However, the computer will think that this is a text. In order to print it as a number, we need to remove the double quotations, as the following:\n\\begin{lstlisting}[language=Python]\n#we simply remove the quotes from inside the parenthesis\nprint(100)\n\\end{lstlisting}\nThis is how we print one number. Now, let us try to print numbers from 1 to 3:\n\\begin{lstlisting}[language=Python]\nprint(1)\nprint(2)\nprint(3)\n\\end{lstlisting}\nThe program will execute the numbers one by one at a time. The end result will be\n\\begin{lstlisting}[language=Python]\nResult:\n1\n2\n3\n\\end{lstlisting}\n\nGreat! But what if we want to print these numbers next to each other? We do it as follows:\n\\begin{lstlisting}[language=Python]\n#separating numbers by a comma!\nprint(1, 2, 3)\n\\end{lstlisting}\nThe result for this print will be: 1 2 3.\n\n\\subsection{Basic Operations and Mathematical Calculations with Integers}\nIt is time for us to learn how to perform operations on numbers. Before going technical, let us start with a small example where we have 2 numbers: 117 and 53. Assume that we want to add these two numbers together, the result will be 170. Now what if we want to tell the computer to add it and print the result of the summation? The example is below:\n\\begin{lstlisting}[language=Python]\nprint(117 + 53)\n\\end{lstlisting}\nThis way, the computer will understand that we have 2 numbers and we want to perform the add operation on them. Try it out on your IDE!\n\nNow, let us discuss the others!\n\n\\begin{tabular}{|c|c|c|c|}\n\\hline\nOperator & Description & Example & Result \\\\\n\\hline\n+ & Addition & $5 + 3$ & $8$ \\\\\n\\hline\n- & Subtraction & $10 - 4$ & $6$ \\\\\n\\hline\n* & Multiplication & $2 \\times 6$ & $12$ \\\\\n\\hline\n/ & Division & $15 / 4$ & $3.75$ \\\\\n\\hline\n// & Floor Division (Integer Division) & $15 // 4$ & $3$ \\\\\n\\hline\n\\% & Modulo (Remainder) & $15 \\% 4$ & $3$ \\\\\n\\hline\n** & Exponentiation & $2^3$ & $8$ \\\\\n\\hline\n\\end{tabular}\n\n\\begin{itemize}\n     \n\\item The addition operator (+) is used for adding two numbers together.\n\\item The subtraction operator (-) is used for subtracting one number from another.\n\\item The multiplication operator (*) is used for multiplying two numbers.\n\\item The division operator (/) performs floating-point division, where the result is a float.\n\\item The floor division operator (//) performs integer division, where the result is the quotient rounded down to the nearest integer.\n\\item The modulo operator (\\%) returns the remainder of the division between two numbers.\n\\item The exponentiation operator (**) raises the first number to the power of the second number.\n\\end{itemize}\n\nLet us look at how to use them in Python:\n\\begin{lstlisting}[language=Python]\nprint(5 + 3)     # Addition = 8\nprint(10 - 4)    # Subtraction = 6\nprint(2 * 6)     # Multiplication = 12\nprint(15 / 4)    # Division = 3.75\nprint(15 // 4)   # Floor Division = 3\nprint(15 % 4)    # Modulo = 3\nprint(2 ** 3)    # Exponentiation = 8\n\\end{lstlisting}\n[add a screenshot from the IDE about the above]\nMake sure to try these operators in your IDE. Change the numbers inside each example to see different results. It is very important to be able to print operations before moving forward.\n\n\\subsection{Floats}\nA float, or a floating-point number, is a number with a decimal place. The number 10.6 for example is a float! So is the number -7.5, in addition to the infinite amount of decimal numbers that could exist!\nLet us try a couple of operations as well in Python, but this time we will use floats instead of int:\n\\begin{lstlisting}[language=Python]\nprint(5.5 + 7.5)     \nprint(-10.1 - 4.2)    \nprint(3 * 6.5)     \n\\end{lstlisting}\nNote that we use integers and floats in the same operation (like the last line).\n\n\n\\subsection{type()}\nThere comes a time when we want to check what is the type of data we are dealing with. So far, we only encountered int and float, however, at a later stage we will explore more types.\nFor now, let us focus on what we have.\nAssume that there exists a number and we want to check its type.\nType(...) is the function that gives us the type of data. We use it as the following:\n\\begin{lstlisting}[language=Python]\ntype(10.5)\n\\end{lstlisting}\n\\textit{type(10.5)} will result in the following \\textit{<class 'float'>} but without printing it. Therefore, we put the \\textit{type} function inside the print function so that Python can say the result out loud, such as the following:\n\n\\begin{lstlisting}[language=Python]\n#the result will be <class 'float'>\nprint(type(10.5))\n\n#the result will be <class 'int'>\nprint(type(10))\n\\end{lstlisting}\n\nTo summarize, to show the type of data, we print the type of data, which is literally translated into print(type(data)).\n\n\\subsection{Operator Priority}\nSometimes an expression might be more than just 1 operation. For example, adding three numbers together. This one is still relatively simple, just like the example below:\n\\begin{lstlisting}[language=Python]\nprint(1+2+3)\n\\end{lstlisting}\nHowever, sometimes it might seem a bit complicated for execution when other operators come into place, such as:\n\\begin{lstlisting}[language=Python]\nprint(1+2*3)\n\\end{lstlisting}\nOne would say that the result would be 9, whereas, in fact, it is 7!\nIn Python, the precedence order is the following in terms of priority:\n\\begin{enumerate}\n    \\item Parentheses\n    \\item Multiplication, division\n    \\item Addition and subtraction\n\\end{enumerate}\nMeaning that in case we have this formula \\((1+6) * 5\\) would be different than  \\(1 + 6 * 5\\).\nIn the first equation, \\((1+6) * 5\\), the priority goes by resolving the parenthesis first, then doing the multiplication. Therefore, the result will be \\(7 * 5 = 35\\). In the second equation, \\(1 + 6 * 5\\), the multiplication takes place first, followed by the addition, i.e.,  \\(1 + 6 * 5 = 1 + 30 = 31\\).\nWe will utilize this concept later on in this course when we are doing more advanced programming.\n\n\\subsection{Summary}\nTo conclude, this lesson has provided a comprehensive understanding of numerical types in Python and their significance in AI calculations. We have explored two fundamental types, integers and floats, which form the basis for numerical computations in Python.\n\nBy examining arithmetic expressions involving different types of numbers, we have demonstrated Python's flexibility in performing calculations and operations.\n\nFurthermore, we have learned how to utilize the type method to check the data type of a number. This knowledge allows us to accurately identify whether a value is an integer, a float, or any other data type which we shall study later on.\n\nFinally, we explored the operator priority and we saw how Python proceeds with calculations when an expression has parenthesis, multiplication, addition, and others. We noticed how different the result can get when we introduce parenthesis to assign the priority for the formula.\n\n\n\n\\subsection{Practical Exercise: Arithmetic Operations [30 mins]}\n\\subsubsection*{Your task}\nOpen your editor and resolve the following equations. Make sure to write them by hand. Don't copy and paste!\nUsing your IDE, calculate the following:\n\\begin{itemize}\n    \\item \\(1 + 1\\)\n    \\item \\(5 * 5\\)\n    \\item \\(1 + 1 - 2\\)\n    \\item \\(((2 * 2) + (3 + 3)) * 10\\)\n    \\item \\((2 * 2) + (3 + 3) * 10\\)\n\\end{itemize}\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\n\\subsection{Share and Compare: Previous Exercise Outcome [30 mins]}\n\\subsubsection*{Your task}\n%Discuss the impact of \n%[PROBABLY CAN BE REMOVED]\n\n\\begin{itemize}\n\\item What parts of the activity did you find challenging?\n\\item Were there parts of the activity you still do not understand?\n\\end{itemize}\n\nAfter posting your reply on the discussion forum, consider your colleagues' posts and reply to at least two of them. Are there any commonalities between your answer and those of your colleagues? What additional insight did you gain?\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}