{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 6: Strings [75 mins]}\n\\subsection{Introduction}\nIn this lesson, we learn about another type of data, the String. We discover their usage in Python, how to declare them, and how to manipulate them. Moreover, we discover the methods used for strings as well.\n\n\\subsection{What Are Strings?}\nIn Python, a string (also can be referred to as \\textit{str}) is a data structure representing a sequence of characters. Remember the \\textit{print(\"Hello World\")}? the content inside the print, i.e. Hello World, is a string!\nBasically, a string is a text surrounded by single quotes or double quotes. In other words, \"Hello world\" can be replaced by 'Hello World'. When they are called into action, printing them would result in the same way,\n\\begin{lstlisting}[language=Python]\nprint(\"Hello\")    # output: Hello\nprint('Hello')    # output: Hello\n\\end{lstlisting}\nTry it out in your IDE and try other strings as well. Print your name for a change!\n\n\n\\subsection{String Declaration and Manipulation}\nString declaration can be through variables. All the operations we want to perform can be then applied to the variables instead. For example:\n\\begin{lstlisting}[language=Python]\nmessage1 = 'Hello, World!'\nmessage2 = \"Welcome to Python!\"\n\nprint(message1) #output: Hello, World!\nprint(message2) #output: Welcome to Python!\n\\end{lstlisting}\nThis can result in the strings being printed one after the other.\n\nAs we mentioned earlier, strings are a sequence of characters; these characters can also be numbers! Therefore, \\(message3 = \"123\"\\) is a string!\nOne would say how can we tell if this is a number or a string? Well, as long as it is surrounded by quotes or double quotes, it means it is definitely a string.\n\\begin{lstlisting}[language=Python]\nmessage3 = '123' #this is a string\nmessage4 = \"123\" #this is a string\nmessage5 = 123   #this is an int!\n\nprint(message3, message4, message5) #output: 123 123 123\n\n#we can also double-check using the 'type' function,\nprint(type(message3)) #output: <class 'str'>\nprint(type(message4)) #output: <class 'str'>\nprint(type(message5)) #output: <class 'int'>\n\\end{lstlisting}\n\n\n\n\\subsection{String Methods}\nIn this part, we explain basic predefined methods that can be applied to strings and how they can be useful in several contexts.\nThe methods are len, upper, lower, and strip. There exist many others, and many methods can be crafted and customized manually, but for this section, we will stick with these 4.\n\\begin{itemize}\n    \\item len(): Returns the length of the string. This function gives the number of characters inside a given string. For example:\n\\begin{lstlisting}[language=Python]\ns1 = \"Hello\"\nnumber_of_characters = len(s1) #this line will store the number of characters that are inside s1 in the variable.\nprint(number_of_characters) #this line will print the value, output: 5\n\\end{lstlisting}\nThis code will print 5, which is the length of the s1 variable.\n\n    \\item upper(): Converts the string to uppercase. This function transforms the given text into capital letters. For example:\n\\begin{lstlisting}[language=Python]\ns1 = \"Hello\"\ns2 = s1.upper() #we notice how we called the upper method by adding a dot after the variable name and then typing 'upper()'\nprint(s2) #output: HELLO\n\\end{lstlisting}\n\n    \\item lower(): Converts the string to lowercase. This function transforms the given text into small letters. For example:\n\\begin{lstlisting}[language=Python]\ns1 = \"CAPTAIN\"\ns2 = s1.lower()\nprint(s2) #output: captain\n\\end{lstlisting}\n\n\n    \\item strip(): Removes the spaces at the beginning of a string and at the end of it. If a string is \"    hi    \", the strip method will make it \"hi\". For example:\n\\begin{lstlisting}[language=Python]\ns1 = \"    AI   \"\ns2 = s1.strip()\nprint(s1) #output:     AI   \nprint(s2) #output: AI\n\\end{lstlisting}\n\n\\end{itemize}\n\nMake sure to try all of these methods with different strings in your IDE.\n\nStrings and other data types can afford to use more than one method. For instance, assume that we have a string \\(s1=\"    hey\"\\), and we are interested in stripping the spaces from that string, and then capitalizing its letters. Possible solutions can be as follows:\nMethod 1:\n\\begin{lstlisting}[language=Python]\ns1 = \"    hey\"\ns2 = s1.strip().upper()\nprint(s2) #output: HEY   \n\\end{lstlisting}\nAnother method would be to apply one method at a time, such as the following:\n\\begin{lstlisting}[language=Python]\ns1 = \"    hey\"\ns2 = s1.strip()\ns3 = s2.upper()\nprint(s3) #output: HEY   \n\\end{lstlisting}\n\n\n\n\\subsection{String Indexing and Slicing}\nAs we previously mentioned, strings are sets of characters. Let us take the string \\(s1=\"Python\"\\). The string has a length of 6, it is made of 6 characters. In strings, we consider numbering the characters from 0 to \\textit{n-1}, where \\textit{n} is the total number of characters, meaning from 0 to 5.\n\n[insert image about this, where every character has a number below it in the box.\nhello\n01234]\n\nAwesome! Now let us move into slicing a string. Assuming that we have \\(s1=\"Python\"\\), and we want to print only the second letter (i.e., y). How can we print it? We use the slicing brackets like the following:\n\\begin{lstlisting}[language=Python]\ns1 = \"Python\"\ns2 = s1[1]\nprint(s2) #output: y\n\\end{lstlisting}\nThe syntax \\textit{s1[1]} extracts the second letter from the string. The other cases for extracting letters from the word Python could be:\n\\begin{itemize}\n    \\item \\textit{s2 = s1[0]}: assigns s2 to be \"P\"\n    \\item \\textit{s2 = s1[1]}: assigns s2 to be \"y\"\n    \\item \\textit{s2 = s1[2]}: assigns s2 to be \"t\"\n    \\item \\textit{s2 = s1[3]}: assigns s2 to be \"h\"\n    \\item \\textit{s2 = s1[4]}: assigns s2 to be \"o\"\n    \\item \\textit{s2 = s1[5]}: assigns s2 to be \"n\"\n\\end{itemize}\n\nWhat if we want to print the first three letters (i.e., Pyt)? We use the slicing syntax.\n\nBelow is an example of how to do so, \n\\begin{lstlisting}[language=Python]\ns1 = \"Python\"\ns2 = s1[0:3]\nprint(s2) #output: Pyt\n\\end{lstlisting}\n\nWe used this \\(s2 = s1[0:3]\\) to extract the content from the string. Let us break it down: \n\\begin{itemize}\n    \\item \\textit{s2} is the new variable.\n    \\item \\textit{s1} is the variable that holds the \"Python\" value.\n    \\item \\textit{0} is the position of the character that we want to start with.\n    \\item \\textit{3} is the position of the character that we want to stop before. Meaning that we stop at 3-1=2\n\\end{itemize}\nTherefore the expression \\([0:3]\\) in this context means that we want to extract the characters with positions 1, 2, and 3.\n\n\n\n\\subsection{String Formatting}\nIn this part, we discover how to concatenate strings together, and how to concatenate a string with a number.\n\n\\subsubsection{Concatenating Strings}\nBasically, the easiest way to combine two strings is to use the '+' operator.\nFor example:\n\\begin{lstlisting}[language=Python]\ns1 = \"Artificial\"\ns2 = \"Intelligence\"\n\n#the way of adding strings in Python is using the + operator\ns3 = s1 + s2\nprint(s3) #output: ArtificialIntelligence\n\n#good practice to add a space when needed between two strings\ns4 = s1 + \" \" + s2\nprint(s4) #output: Artificial Intelligence\n\\end{lstlisting}\n\nWe notice that the variable \\textit{s3} outputs \\textit{ArtificialIntelligence} without a space between the two words. This is why in \\textit{s4} we do add an extra space between \\textit{s1} and \\textit{s2}.\nNote that we can also add strings directly to the variable, and also printing them directly. For example:\n\\begin{lstlisting}[language=Python]\ns1 = \"Artificial\"\n#adding a string and a space to a variable\nprint(s1 + \" \" + \"Intelligence\")\n\n#or in this case, we can do this also. Note that the space is between the double quote and the letter I.\nprint(s1 + \" Intelligence\") \n\\end{lstlisting}\n\n\\subsubsection{Concatenating Strings with Numbers}\nHowever, in Python, you cannot add a number to a string in the same way:\n\\begin{lstlisting}[language=Python]\ns1 = \"Artificial\"\ns2 = 1000 #this is an int\n\ns3 = s1 + s2 #this is incorrect, we cannot add a number to a string like that. The computer wouldn't accept it\n\\end{lstlisting}\n\nThere are a couple of ways to do it. First of all, is to use the Format method, such as:\n\\begin{lstlisting}[language=Python]\ns1 = \"Artificial {}\"\ns2 = 1000\nprint(s1.format(s2)) #output: Artificial 1000 \n\\end{lstlisting}\nIn this way, we added a \\textit{{}} to the place where we want the number to appear. In this scenario, it was after the word \\textit{Artificial}. Then, we used the format method to tell the number where to sit.\nAnother example could be the following:\n\\begin{lstlisting}[language=Python]\ns1 = \"I am {}% sure that I will finish this lesson in less than {} days.\"\ns2 = 100\ns3 = 2.5\nprint(s1.format(s2, s3))\n#output: I am 100% sure that I will finish this lesson in less than 2.5 days.\n\\end{lstlisting}\nWe added two \\textit{{}}, the first one is before the \\textit{\\%}, and the second one is before the word \\textit{\"days\"}. Then, we told Python to print the long text while filling up these empty braces with the numbers.\n\nAnother way is to convert the number to a string using the method \\textit{str(...)}.\n\\begin{lstlisting}[language=Python]\ns1 = \"Artificial\"\ns2 = 1000 #this is an int\nprint(s1 + \" \" + str(s2)) #output: Artificial 1000 \n\\end{lstlisting}\nBy using \\textit{str(s2)}, the number is converted to a string instead of a text. Therefore, the concatenation of the two variables would be valid.\n\n\n\n\n\n\n\n\n\\subsection{Summary}\nTo conclude, this lesson has provided a comprehensive understanding of strings in Python and how to work with them. We started by introducing strings as a data structure representing a sequence of characters. We learned that strings can be declared using single quotes or double quotes and can be used to store text or even numeric values as long as they are surrounded by quotes.\n\nWe explored various operations and manipulations that can be performed on strings. We learned about string methods such as len(), upper(), lower(), and strip(), and how they can be used to obtain information about strings, convert them to uppercase or lowercase, and remove leading or trailing spaces. We also learned that multiple methods can be combined and applied sequentially to achieve the desired result.\n\nWe also explored string indexing and slicing, which allowed us to extract specific portions of a string based on their positions. We understood that strings are zero-indexed, meaning the first character is at position 0, and we used slicing syntax to specify the start and end positions of the desired substring.\n\nWe also discussed string formatting and how to concatenate strings together. We learned that we can use the + operator to concatenate strings and that we can use the format() method to combine strings with numbers or other variables. We explored different examples and saw how to format strings to incorporate dynamic values.\n\n\n\n\n\\subsection{Practical Exercise: String Manipulation [30 mins]}\n\\subsubsection*{Solve the String exercise}\nNow let us solve a simple guided exercise where we apply 2 methods to a string. We have a string \"iLoveArTiFiCiAlInTeLlIgEnCe\" and we want to slice the following text out of it \"ArTiFiCiAlInTeLlIgEnCe\" using the slicing method, then capitalize all the letters and print it. Below, we elaborate more on the steps.\n\nFirst, we want to define the following variables inside a new piece of code.\n\\begin{itemize}\n    \\item \\(starts\\_with = 5\\)\n    \\item \\(ends\\_with = 27\\)\n    \\item \\(text = \"iLoveArTiFiCiAlInTeLlIgEnCe\"\\)\n\\end{itemize}\nThen, extract the characters of the variable \\textit{text} from the given positions (i.e., string\\_name[a, b]). Store the extracted value inside a new variable, call it \\textit{var1}. Afterward, define a new variable, \\textit{var2}, and set it to be equal to the capitalized (\\textit{upper()}) version of \\textit{var1}. Print \\textit{var1} and \\textit{var2} at the end.\n\n\n\n\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\n\\subsection{Model Answer(s): Basic Operations}\n[REVEAL THE CODE]\n\n\n\n\\subsection{Share and Compare: Basic Operations [30 mins]}\n\\subsubsection*{Your task}\n[short introduction to the activity, followed by a succinct explanation of the task(s)]\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}