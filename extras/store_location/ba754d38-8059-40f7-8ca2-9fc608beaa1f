{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "{Lesson 2: Boolean Data Type [60 mins]}\n\\subsection{Introduction}\n Booleans represent a data value that can be either \\textit{True} or \\textit{False}. They are fundamental elements used in various programming languages to evaluate conditions and make choices based on their truth values. Throughout this week, we will learn how to define Booleans, use comparison operators to evaluate expressions, employ logical operators to combine conditions and perform type-checking in Python. \n\n\n\n\\subsection{What are Booleans?}\nImagine we have a switch with only two positions: ON and OFF. Booleans are like those switches, but instead of controlling electrical devices, they are used in computer programming to make decisions. A boolean is a data value that can either be a \\textit{True} (Yes, On, 1) or a \\textit{False} (No, Off, 0).\n\n\\subsubsection{Defining Booleans}\nAs indicated above, the state of a boolean can either be True or False. Therefore, to define a boolean we can set it as either one of these two values such as the following:\n\\begin{lstlisting}[language=Python]\nis_raining = False\nis_hot = True\n\\end{lstlisting}\nThese two booleans hold different values. \n\n\\subsubsection{Naming Convention}\nIn Python, there is a widely followed convention for naming boolean variables. The convention is to use descriptive names that make it clear the variable represents a boolean value. Commonly, we use words like \"is\", \"has\", \"can\" or similar prefixes. For instance, if we want a value that represents whether the weather is hot or not, we can simply use \"is\\_hot\" as a variable name, and then this variable can either be a True, indicating that the weather is hot, or False, indicating that the weather is not hot. Other examples such as: \"can\\_dance\", \"is\\_logged\\_in\", \"has\\_permission\", and so on depending on the context. \n\n\\subsubsection{Printing Booleans}\nPrinting these variables is also possible:\n\\begin{lstlisting}[language=Python]\nprint(is_raining) #output: False\nprint(is_hot) #output: True\n\n#printing the value directly without the variables\nprint(True) #output: True\nprint(False) #output: True\n\\end{lstlisting}\n\nIt is worth mentioning that 0's and 1's are considered also in most programming languages where 0 indicates False, and 1 indicates True. We can force Python to show us these two values by transforming from Boolean to Integer using the method \\textit{int()}:\n\\begin{lstlisting}[language=Python]\n# Example booleans\nbool_true = True\nbool_false = False\n\n# Convert booleans to integers (1 and 0)\nint_true = int(bool_true)\nint_false = int(bool_false)\n\n# Print the integer representations of the booleans\nprint(int_true)   # Output: 1\nprint(int_false)  # Output: 0\n\\end{lstlisting}\n\n\n\\subsection{Comparisons and Equalities}\ncomparing variables results in one of the following: a true or a false. In other words, when we evaluate an expression, we usually seek a Boolean value. Assume that we have 2 int variables x and y. We can compare them to see if the statement is correct or not. \nFor example, \\(x > y\\) can either be a true statement or a false one. If x and y are 10 and 5, respectively, then the statement \\(x > y\\) will result in a Boolean True. Let's check how it appears from a coding perspective.\n\\begin{lstlisting}[language=Python]\n# Defining variables\nx = 10\ny = 5\n\n# Comparing variables and outputting the result directly\nprint(x > y)  # Output: True\n\n\n# Assigning the result to a variable first before printing\nis_x_bigger_y = x > y\nprint(is_x_bigger_y)  # Output: True\n\\end{lstlisting}\nMake sure to try this on your IDE!\n\n\n\\begin{table}[ht]\n\\centering\n\\begin{tabular}{c|c}\n\\textbf{Operator} & \\textbf{Description} \\\\ \\hline \n$==$ & Equal to \\\\\n\\(\\neq\\) & Not equal to \\\\\n$>$ & Greater than \\\\\n$<$ & Less than \\\\\n\\(\\geq\\) & Greater than or equal to \\\\\n\\(\\leq\\) & Less than or equal to \\\\\n\\end{tabular}\n\\caption{Commonly Used Comparison and Equality Operators in Python}\n\\label{tab:operators}\n\\end{table}\n\nWe list below the operators:\n\\begin{itemize}\n    \\item Equal to: $==$ \\newline\n    Checks if two values are equal. Example: \\(5 == 5\\) evaluates to True.\n    \n    \\item Not equal to: $!=$ \\newline\n    Checks if two values are not equal. Example: \\(5 != 3\\) evaluates to True.\n\n    \\item Greater than: $>$ \\newline\n    Checks if the value on the left is greater than the value on the right. Example: \\(10 > 5\\) evaluates to True.\n\n    \\item Less than: $<$ \\newline\n    Checks if the value on the left is less than the value on the right. Example: \\(3 < 7\\) evaluates to True.\n\n    \\item Greater than or equal to: $>=$ \\newline\n    Checks if the value on the left is greater than or equal to the value on the right. Example: \\(5 >= 5\\) evaluates to True.\n\n    \\item Less than or equal to: $<=$ \\newline\n    Checks if the value on the left is less than or equal to the value on the right. Example: \\(2 <= 4\\) evaluates to True\n\\end{itemize}\n\n% \\newline\nWe can interpret these operators in Python such as the following:\n\\begin{lstlisting}[language=Python]\n# Defining variables\nx = 10\ny = 5\n\nprint(x == y)   # Output: False\nprint(x != y)   # Output: True\nprint(x > y)    # Output: True\nprint(x < y)    # Output: False\nprint(x >= y)   # Output: True\nprint(x <= y)   # Output: False\n\\end{lstlisting}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\subsection{Logical operators}\nWe use logical operators to combine or modify conditional statements, allowing us to make more complex decisions based on multiple conditions. The three main logical operators are and, or, and not.\n\n\n\\subsubsection{Logical and}\n\\newline (the weather is hot) \\textbf{and} (the beach is open). \n\\newline If these conditions were both true, the collective decision using the \\textbf{and} operator will also result in a true.\n\\newline If one of these decisions were false, the final result will be false.\nExample with Python:\n\\begin{lstlisting}[language=Python]\n# Defining variables\nis_weather_hot = True\nis_beach_open = True\nis_weekend = False\n\n# Outputting the result directly\nprint(is_weather_hot and is_beach_open) #output: True\n\n\n# Assigning the result to a variable first before printing\ngoing_to_swim = is_weather_hot and is_beach_open\nprint(going_to_swim) #output: True\n\nweekend_beach = is_weather_hot and is_beach_open and is_weekend\nprint(weekend_beach) #output: False\n\\end{lstlisting}\nNote that in the last two lines, we added 3 conditions to the same expression. The final result is false because one of the conditions (is\\_weekend) is false.\n\n\n\\subsubsection{Logical or}\n\\newline (the weather is hot) \\textbf{or} (the humidity is high). \n\\newline If these conditions were both true, the collective decision using the \\textbf{and} operator will also result in a true.\n\\newline If one of these decisions were false, the final result will be false.\nExample with Python:\n\\begin{lstlisting}[language=Python]\n# Defining variables\nis_weather_hot = True\nis_humidity_high = False\n\n\n# Outputting the result directly\nprint(is_weather_hot or is_humidity_high) #output: True\n\n\n# Assigning the result to a variable first before printing\nwear_shorts = is_weather_hot or is_humidity_high\nprint(wear_shorts) #output: True\n\\end{lstlisting}\n\nThe table below is a summary of the local operators AND and OR.\n\n\\begin{table}[ht]\n\\centering\n\\begin{tabular}{c|c|c|c}\n\\textbf{Operand 1} & \\textbf{Operand 2} & \\textbf{AND Result} & \\textbf{OR Result} \\\\ \\hline\nTrue & True & True & True \\\\\nTrue & False & False & True \\\\\nFalse & True & False & True \\\\\nFalse & False & False & False \\\\\n\\end{tabular}\n\\caption{Logical Operators: AND and OR}\n\\label{tab:logical-and-or}\n\\end{table}\n\n\n\\subsubsection{Logical Not}\nThe logical Not is used to perform logical negation, which means it changes the boolean value of its operand to its opposite. If the value is True, then \"not True\" is a \"False\". In parallel, if the value is False, then \"not False\" is a \"True\".\nHere are some examples written in Python:\n\n\\begin{lstlisting}[language=Python]\n# Example 1\nx = True\nresult = not x\nprint(result)  #Output: False\n\n# Example 2\ny = False\nresult = not y\nprint(result)  #Output: True\n\n# Example 3\nage = 18\nis_adult = age >= 18\nis_not_adult = not is_adult\nprint(is_not_adult)  #Output: False\n\\end{lstlisting}\n\n\\subsection{Identity and Type Checking in Python}\n\\subsubsection{Is}\nThe \\textbf{is} operator in Python helps us figure out if two things are exactly the same. Imagine we have two boxes, and we want to check if they contain the same object. The \\textbf{is} operator is like a special detective that looks inside the boxes and tells us if they both have the exact same object or not. It doesn't care if the objects look similar or have the same name; it only cares if they are really the same object. In other words, it is used to check if two variables refer to the same object in memory. The syntax is: \\textit{variable1} \\textbf{is} \\textit{variable2}. For example:\n\n\\begin{lstlisting}[language=Python]\nx = \"Artificial\"\ny = x\nprint(x is y)  # Output: True, because both x and y point to the same string in memory\n\\end{lstlisting}\n\n\\subsubsection{Object Type Check}\nWe can further use Python to check the type of the object. We know that the method \\textit{type(variable1)} gives us the type of the variable inside. We can validate the result of this method using the \\textbf{is} operator.\n\n\\begin{lstlisting}[language=Python]\n#Comparing type directly\nx = 10\nprint(type(x) is int) #output: True\n\\end{lstlisting}\n\n\n\n\n\n\\subsection{Summary}\nThis lesson covers the concept of Booleans and their significance in computer programming. Booleans are data values that can be either \\textit{True} or \\textit{False}, representing binary decisions. In Python, we can define boolean variables using the keywords \\textit{True} and \\textit{False} or by evaluating expressions that result in boolean values.\n\nAdditionally, the lesson delves into comparisons and equalities in Python. We can use comparison operators such as $>$, $<$, $==$, $!=$, $>=$, and $<=$ to evaluate expressions and obtain boolean results. Logical operators, such as \\textit{and}, \\textit{or}, and \\textit{not}, allow us to combine multiple conditions to make more complex decisions based on their truth values.\n\nLastly, the lesson discusses the \\textit{is} operator, which is used to check if two variables refer to the same object in memory.\n\n\n\n\\subsection{Practical Exercise: Printing Booleans [30 mins]}\n\\subsubsection*{Your task}\n[short introduction to the activity, followed by a succinct explanation of the task(s)]\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]\n\n\n\\subsection{Model Answer(s): Printing Booleans}\n[Page content]\n\n\n\\subsection{Share and Compare: Printing Booleans [30 mins]}\n\\subsubsection*{Your task}\n[short introduction to the activity, followed by a succinct explanation of the task(s)]\n\n\\subsubsection*{Guidelines}\n[TO BE ADDED BY LD]", "metadata": {"source": "./full-course/aai.txt"}}}